
Line_Follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005844  08005844  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005844  08005844  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005844  08005844  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800584c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  0800585c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800585c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acbc  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcc  00000000  00000000  0002acf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001146e  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb51  00000000  00000000  0003f56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cde6  00000000  00000000  0004e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000baea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b0  00000000  00000000  000baef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	0800563c 	.word	0x0800563c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	0800563c 	.word	0x0800563c

08000224 <__aeabi_dmul>:
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800022e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000232:	bf1d      	ittte	ne
 8000234:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000238:	ea94 0f0c 	teqne	r4, ip
 800023c:	ea95 0f0c 	teqne	r5, ip
 8000240:	f000 f8de 	bleq	8000400 <__aeabi_dmul+0x1dc>
 8000244:	442c      	add	r4, r5
 8000246:	ea81 0603 	eor.w	r6, r1, r3
 800024a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800024e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000252:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000256:	bf18      	it	ne
 8000258:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800025c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000264:	d038      	beq.n	80002d8 <__aeabi_dmul+0xb4>
 8000266:	fba0 ce02 	umull	ip, lr, r0, r2
 800026a:	f04f 0500 	mov.w	r5, #0
 800026e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000272:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000276:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027a:	f04f 0600 	mov.w	r6, #0
 800027e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000282:	f09c 0f00 	teq	ip, #0
 8000286:	bf18      	it	ne
 8000288:	f04e 0e01 	orrne.w	lr, lr, #1
 800028c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000290:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000294:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000298:	d204      	bcs.n	80002a4 <__aeabi_dmul+0x80>
 800029a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800029e:	416d      	adcs	r5, r5
 80002a0:	eb46 0606 	adc.w	r6, r6, r6
 80002a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002bc:	bf88      	it	hi
 80002be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c2:	d81e      	bhi.n	8000302 <__aeabi_dmul+0xde>
 80002c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002c8:	bf08      	it	eq
 80002ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ce:	f150 0000 	adcs.w	r0, r0, #0
 80002d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002dc:	ea46 0101 	orr.w	r1, r6, r1
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	ea81 0103 	eor.w	r1, r1, r3
 80002e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002ec:	bfc2      	ittt	gt
 80002ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002f6:	bd70      	popgt	{r4, r5, r6, pc}
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f04f 0e00 	mov.w	lr, #0
 8000300:	3c01      	subs	r4, #1
 8000302:	f300 80ab 	bgt.w	800045c <__aeabi_dmul+0x238>
 8000306:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030a:	bfde      	ittt	le
 800030c:	2000      	movle	r0, #0
 800030e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000312:	bd70      	pople	{r4, r5, r6, pc}
 8000314:	f1c4 0400 	rsb	r4, r4, #0
 8000318:	3c20      	subs	r4, #32
 800031a:	da35      	bge.n	8000388 <__aeabi_dmul+0x164>
 800031c:	340c      	adds	r4, #12
 800031e:	dc1b      	bgt.n	8000358 <__aeabi_dmul+0x134>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f305 	lsl.w	r3, r0, r5
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f205 	lsl.w	r2, r1, r5
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800033c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	fa21 f604 	lsr.w	r6, r1, r4
 8000348:	eb42 0106 	adc.w	r1, r2, r6
 800034c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000350:	bf08      	it	eq
 8000352:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f1c4 040c 	rsb	r4, r4, #12
 800035c:	f1c4 0520 	rsb	r5, r4, #32
 8000360:	fa00 f304 	lsl.w	r3, r0, r4
 8000364:	fa20 f005 	lsr.w	r0, r0, r5
 8000368:	fa01 f204 	lsl.w	r2, r1, r4
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000378:	f141 0100 	adc.w	r1, r1, #0
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f1c4 0520 	rsb	r5, r4, #32
 800038c:	fa00 f205 	lsl.w	r2, r0, r5
 8000390:	ea4e 0e02 	orr.w	lr, lr, r2
 8000394:	fa20 f304 	lsr.w	r3, r0, r4
 8000398:	fa01 f205 	lsl.w	r2, r1, r5
 800039c:	ea43 0302 	orr.w	r3, r3, r2
 80003a0:	fa21 f004 	lsr.w	r0, r1, r4
 80003a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	fa21 f204 	lsr.w	r2, r1, r4
 80003ac:	ea20 0002 	bic.w	r0, r0, r2
 80003b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b8:	bf08      	it	eq
 80003ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f094 0f00 	teq	r4, #0
 80003c4:	d10f      	bne.n	80003e6 <__aeabi_dmul+0x1c2>
 80003c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ca:	0040      	lsls	r0, r0, #1
 80003cc:	eb41 0101 	adc.w	r1, r1, r1
 80003d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3c01      	subeq	r4, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1a6>
 80003da:	ea41 0106 	orr.w	r1, r1, r6
 80003de:	f095 0f00 	teq	r5, #0
 80003e2:	bf18      	it	ne
 80003e4:	4770      	bxne	lr
 80003e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ea:	0052      	lsls	r2, r2, #1
 80003ec:	eb43 0303 	adc.w	r3, r3, r3
 80003f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f4:	bf08      	it	eq
 80003f6:	3d01      	subeq	r5, #1
 80003f8:	d0f7      	beq.n	80003ea <__aeabi_dmul+0x1c6>
 80003fa:	ea43 0306 	orr.w	r3, r3, r6
 80003fe:	4770      	bx	lr
 8000400:	ea94 0f0c 	teq	r4, ip
 8000404:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000408:	bf18      	it	ne
 800040a:	ea95 0f0c 	teqne	r5, ip
 800040e:	d00c      	beq.n	800042a <__aeabi_dmul+0x206>
 8000410:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000414:	bf18      	it	ne
 8000416:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041a:	d1d1      	bne.n	80003c0 <__aeabi_dmul+0x19c>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042e:	bf06      	itte	eq
 8000430:	4610      	moveq	r0, r2
 8000432:	4619      	moveq	r1, r3
 8000434:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000438:	d019      	beq.n	800046e <__aeabi_dmul+0x24a>
 800043a:	ea94 0f0c 	teq	r4, ip
 800043e:	d102      	bne.n	8000446 <__aeabi_dmul+0x222>
 8000440:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000444:	d113      	bne.n	800046e <__aeabi_dmul+0x24a>
 8000446:	ea95 0f0c 	teq	r5, ip
 800044a:	d105      	bne.n	8000458 <__aeabi_dmul+0x234>
 800044c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000450:	bf1c      	itt	ne
 8000452:	4610      	movne	r0, r2
 8000454:	4619      	movne	r1, r3
 8000456:	d10a      	bne.n	800046e <__aeabi_dmul+0x24a>
 8000458:	ea81 0103 	eor.w	r1, r1, r3
 800045c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000460:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd70      	pop	{r4, r5, r6, pc}
 800046e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000472:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000476:	bd70      	pop	{r4, r5, r6, pc}

08000478 <__aeabi_fmul>:
 8000478:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800047c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000480:	bf1e      	ittt	ne
 8000482:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000486:	ea92 0f0c 	teqne	r2, ip
 800048a:	ea93 0f0c 	teqne	r3, ip
 800048e:	d06f      	beq.n	8000570 <__aeabi_fmul+0xf8>
 8000490:	441a      	add	r2, r3
 8000492:	ea80 0c01 	eor.w	ip, r0, r1
 8000496:	0240      	lsls	r0, r0, #9
 8000498:	bf18      	it	ne
 800049a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800049e:	d01e      	beq.n	80004de <__aeabi_fmul+0x66>
 80004a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004ac:	fba0 3101 	umull	r3, r1, r0, r1
 80004b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b8:	bf3e      	ittt	cc
 80004ba:	0049      	lslcc	r1, r1, #1
 80004bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004c0:	005b      	lslcc	r3, r3, #1
 80004c2:	ea40 0001 	orr.w	r0, r0, r1
 80004c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ca:	2afd      	cmp	r2, #253	; 0xfd
 80004cc:	d81d      	bhi.n	800050a <__aeabi_fmul+0x92>
 80004ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004d6:	bf08      	it	eq
 80004d8:	f020 0001 	biceq.w	r0, r0, #1
 80004dc:	4770      	bx	lr
 80004de:	f090 0f00 	teq	r0, #0
 80004e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004e6:	bf08      	it	eq
 80004e8:	0249      	lsleq	r1, r1, #9
 80004ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004f2:	3a7f      	subs	r2, #127	; 0x7f
 80004f4:	bfc2      	ittt	gt
 80004f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004fe:	4770      	bxgt	lr
 8000500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000504:	f04f 0300 	mov.w	r3, #0
 8000508:	3a01      	subs	r2, #1
 800050a:	dc5d      	bgt.n	80005c8 <__aeabi_fmul+0x150>
 800050c:	f112 0f19 	cmn.w	r2, #25
 8000510:	bfdc      	itt	le
 8000512:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000516:	4770      	bxle	lr
 8000518:	f1c2 0200 	rsb	r2, r2, #0
 800051c:	0041      	lsls	r1, r0, #1
 800051e:	fa21 f102 	lsr.w	r1, r1, r2
 8000522:	f1c2 0220 	rsb	r2, r2, #32
 8000526:	fa00 fc02 	lsl.w	ip, r0, r2
 800052a:	ea5f 0031 	movs.w	r0, r1, rrx
 800052e:	f140 0000 	adc.w	r0, r0, #0
 8000532:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000536:	bf08      	it	eq
 8000538:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800053c:	4770      	bx	lr
 800053e:	f092 0f00 	teq	r2, #0
 8000542:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000546:	bf02      	ittt	eq
 8000548:	0040      	lsleq	r0, r0, #1
 800054a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800054e:	3a01      	subeq	r2, #1
 8000550:	d0f9      	beq.n	8000546 <__aeabi_fmul+0xce>
 8000552:	ea40 000c 	orr.w	r0, r0, ip
 8000556:	f093 0f00 	teq	r3, #0
 800055a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800055e:	bf02      	ittt	eq
 8000560:	0049      	lsleq	r1, r1, #1
 8000562:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000566:	3b01      	subeq	r3, #1
 8000568:	d0f9      	beq.n	800055e <__aeabi_fmul+0xe6>
 800056a:	ea41 010c 	orr.w	r1, r1, ip
 800056e:	e78f      	b.n	8000490 <__aeabi_fmul+0x18>
 8000570:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	bf18      	it	ne
 800057a:	ea93 0f0c 	teqne	r3, ip
 800057e:	d00a      	beq.n	8000596 <__aeabi_fmul+0x11e>
 8000580:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000584:	bf18      	it	ne
 8000586:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800058a:	d1d8      	bne.n	800053e <__aeabi_fmul+0xc6>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	4770      	bx	lr
 8000596:	f090 0f00 	teq	r0, #0
 800059a:	bf17      	itett	ne
 800059c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005a0:	4608      	moveq	r0, r1
 80005a2:	f091 0f00 	teqne	r1, #0
 80005a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005aa:	d014      	beq.n	80005d6 <__aeabi_fmul+0x15e>
 80005ac:	ea92 0f0c 	teq	r2, ip
 80005b0:	d101      	bne.n	80005b6 <__aeabi_fmul+0x13e>
 80005b2:	0242      	lsls	r2, r0, #9
 80005b4:	d10f      	bne.n	80005d6 <__aeabi_fmul+0x15e>
 80005b6:	ea93 0f0c 	teq	r3, ip
 80005ba:	d103      	bne.n	80005c4 <__aeabi_fmul+0x14c>
 80005bc:	024b      	lsls	r3, r1, #9
 80005be:	bf18      	it	ne
 80005c0:	4608      	movne	r0, r1
 80005c2:	d108      	bne.n	80005d6 <__aeabi_fmul+0x15e>
 80005c4:	ea80 0001 	eor.w	r0, r0, r1
 80005c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005d4:	4770      	bx	lr
 80005d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bx	lr

080005e0 <__aeabi_drsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e002      	b.n	80005ec <__adddf3>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dsub>:
 80005e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005ec <__adddf3>:
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005f6:	ea94 0f05 	teq	r4, r5
 80005fa:	bf08      	it	eq
 80005fc:	ea90 0f02 	teqeq	r0, r2
 8000600:	bf1f      	itttt	ne
 8000602:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000606:	ea55 0c02 	orrsne.w	ip, r5, r2
 800060a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800060e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000612:	f000 80e2 	beq.w	80007da <__adddf3+0x1ee>
 8000616:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800061a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800061e:	bfb8      	it	lt
 8000620:	426d      	neglt	r5, r5
 8000622:	dd0c      	ble.n	800063e <__adddf3+0x52>
 8000624:	442c      	add	r4, r5
 8000626:	ea80 0202 	eor.w	r2, r0, r2
 800062a:	ea81 0303 	eor.w	r3, r1, r3
 800062e:	ea82 0000 	eor.w	r0, r2, r0
 8000632:	ea83 0101 	eor.w	r1, r3, r1
 8000636:	ea80 0202 	eor.w	r2, r0, r2
 800063a:	ea81 0303 	eor.w	r3, r1, r3
 800063e:	2d36      	cmp	r5, #54	; 0x36
 8000640:	bf88      	it	hi
 8000642:	bd30      	pophi	{r4, r5, pc}
 8000644:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800064c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000650:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000654:	d002      	beq.n	800065c <__adddf3+0x70>
 8000656:	4240      	negs	r0, r0
 8000658:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800065c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000660:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000664:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000668:	d002      	beq.n	8000670 <__adddf3+0x84>
 800066a:	4252      	negs	r2, r2
 800066c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000670:	ea94 0f05 	teq	r4, r5
 8000674:	f000 80a7 	beq.w	80007c6 <__adddf3+0x1da>
 8000678:	f1a4 0401 	sub.w	r4, r4, #1
 800067c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000680:	db0d      	blt.n	800069e <__adddf3+0xb2>
 8000682:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000686:	fa22 f205 	lsr.w	r2, r2, r5
 800068a:	1880      	adds	r0, r0, r2
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	fa03 f20e 	lsl.w	r2, r3, lr
 8000694:	1880      	adds	r0, r0, r2
 8000696:	fa43 f305 	asr.w	r3, r3, r5
 800069a:	4159      	adcs	r1, r3
 800069c:	e00e      	b.n	80006bc <__adddf3+0xd0>
 800069e:	f1a5 0520 	sub.w	r5, r5, #32
 80006a2:	f10e 0e20 	add.w	lr, lr, #32
 80006a6:	2a01      	cmp	r2, #1
 80006a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006ac:	bf28      	it	cs
 80006ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006b2:	fa43 f305 	asr.w	r3, r3, r5
 80006b6:	18c0      	adds	r0, r0, r3
 80006b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c0:	d507      	bpl.n	80006d2 <__adddf3+0xe6>
 80006c2:	f04f 0e00 	mov.w	lr, #0
 80006c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80006ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80006d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006d6:	d31b      	bcc.n	8000710 <__adddf3+0x124>
 80006d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006dc:	d30c      	bcc.n	80006f8 <__adddf3+0x10c>
 80006de:	0849      	lsrs	r1, r1, #1
 80006e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006e8:	f104 0401 	add.w	r4, r4, #1
 80006ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006f4:	f080 809a 	bcs.w	800082c <__adddf3+0x240>
 80006f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	ea41 0105 	orr.w	r1, r1, r5
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000714:	4140      	adcs	r0, r0
 8000716:	eb41 0101 	adc.w	r1, r1, r1
 800071a:	3c01      	subs	r4, #1
 800071c:	bf28      	it	cs
 800071e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000722:	d2e9      	bcs.n	80006f8 <__adddf3+0x10c>
 8000724:	f091 0f00 	teq	r1, #0
 8000728:	bf04      	itt	eq
 800072a:	4601      	moveq	r1, r0
 800072c:	2000      	moveq	r0, #0
 800072e:	fab1 f381 	clz	r3, r1
 8000732:	bf08      	it	eq
 8000734:	3320      	addeq	r3, #32
 8000736:	f1a3 030b 	sub.w	r3, r3, #11
 800073a:	f1b3 0220 	subs.w	r2, r3, #32
 800073e:	da0c      	bge.n	800075a <__adddf3+0x16e>
 8000740:	320c      	adds	r2, #12
 8000742:	dd08      	ble.n	8000756 <__adddf3+0x16a>
 8000744:	f102 0c14 	add.w	ip, r2, #20
 8000748:	f1c2 020c 	rsb	r2, r2, #12
 800074c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000750:	fa21 f102 	lsr.w	r1, r1, r2
 8000754:	e00c      	b.n	8000770 <__adddf3+0x184>
 8000756:	f102 0214 	add.w	r2, r2, #20
 800075a:	bfd8      	it	le
 800075c:	f1c2 0c20 	rsble	ip, r2, #32
 8000760:	fa01 f102 	lsl.w	r1, r1, r2
 8000764:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000768:	bfdc      	itt	le
 800076a:	ea41 010c 	orrle.w	r1, r1, ip
 800076e:	4090      	lslle	r0, r2
 8000770:	1ae4      	subs	r4, r4, r3
 8000772:	bfa2      	ittt	ge
 8000774:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000778:	4329      	orrge	r1, r5
 800077a:	bd30      	popge	{r4, r5, pc}
 800077c:	ea6f 0404 	mvn.w	r4, r4
 8000780:	3c1f      	subs	r4, #31
 8000782:	da1c      	bge.n	80007be <__adddf3+0x1d2>
 8000784:	340c      	adds	r4, #12
 8000786:	dc0e      	bgt.n	80007a6 <__adddf3+0x1ba>
 8000788:	f104 0414 	add.w	r4, r4, #20
 800078c:	f1c4 0220 	rsb	r2, r4, #32
 8000790:	fa20 f004 	lsr.w	r0, r0, r4
 8000794:	fa01 f302 	lsl.w	r3, r1, r2
 8000798:	ea40 0003 	orr.w	r0, r0, r3
 800079c:	fa21 f304 	lsr.w	r3, r1, r4
 80007a0:	ea45 0103 	orr.w	r1, r5, r3
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	f1c4 040c 	rsb	r4, r4, #12
 80007aa:	f1c4 0220 	rsb	r2, r4, #32
 80007ae:	fa20 f002 	lsr.w	r0, r0, r2
 80007b2:	fa01 f304 	lsl.w	r3, r1, r4
 80007b6:	ea40 0003 	orr.w	r0, r0, r3
 80007ba:	4629      	mov	r1, r5
 80007bc:	bd30      	pop	{r4, r5, pc}
 80007be:	fa21 f004 	lsr.w	r0, r1, r4
 80007c2:	4629      	mov	r1, r5
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	f094 0f00 	teq	r4, #0
 80007ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007ce:	bf06      	itte	eq
 80007d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007d4:	3401      	addeq	r4, #1
 80007d6:	3d01      	subne	r5, #1
 80007d8:	e74e      	b.n	8000678 <__adddf3+0x8c>
 80007da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007de:	bf18      	it	ne
 80007e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007e4:	d029      	beq.n	800083a <__adddf3+0x24e>
 80007e6:	ea94 0f05 	teq	r4, r5
 80007ea:	bf08      	it	eq
 80007ec:	ea90 0f02 	teqeq	r0, r2
 80007f0:	d005      	beq.n	80007fe <__adddf3+0x212>
 80007f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007f6:	bf04      	itt	eq
 80007f8:	4619      	moveq	r1, r3
 80007fa:	4610      	moveq	r0, r2
 80007fc:	bd30      	pop	{r4, r5, pc}
 80007fe:	ea91 0f03 	teq	r1, r3
 8000802:	bf1e      	ittt	ne
 8000804:	2100      	movne	r1, #0
 8000806:	2000      	movne	r0, #0
 8000808:	bd30      	popne	{r4, r5, pc}
 800080a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800080e:	d105      	bne.n	800081c <__adddf3+0x230>
 8000810:	0040      	lsls	r0, r0, #1
 8000812:	4149      	adcs	r1, r1
 8000814:	bf28      	it	cs
 8000816:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800081a:	bd30      	pop	{r4, r5, pc}
 800081c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000820:	bf3c      	itt	cc
 8000822:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000826:	bd30      	popcc	{r4, r5, pc}
 8000828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800082c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd30      	pop	{r4, r5, pc}
 800083a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800083e:	bf1a      	itte	ne
 8000840:	4619      	movne	r1, r3
 8000842:	4610      	movne	r0, r2
 8000844:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000848:	bf1c      	itt	ne
 800084a:	460b      	movne	r3, r1
 800084c:	4602      	movne	r2, r0
 800084e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000852:	bf06      	itte	eq
 8000854:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000858:	ea91 0f03 	teqeq	r1, r3
 800085c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000860:	bd30      	pop	{r4, r5, pc}
 8000862:	bf00      	nop

08000864 <__aeabi_ui2d>:
 8000864:	f090 0f00 	teq	r0, #0
 8000868:	bf04      	itt	eq
 800086a:	2100      	moveq	r1, #0
 800086c:	4770      	bxeq	lr
 800086e:	b530      	push	{r4, r5, lr}
 8000870:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000874:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000878:	f04f 0500 	mov.w	r5, #0
 800087c:	f04f 0100 	mov.w	r1, #0
 8000880:	e750      	b.n	8000724 <__adddf3+0x138>
 8000882:	bf00      	nop

08000884 <__aeabi_i2d>:
 8000884:	f090 0f00 	teq	r0, #0
 8000888:	bf04      	itt	eq
 800088a:	2100      	moveq	r1, #0
 800088c:	4770      	bxeq	lr
 800088e:	b530      	push	{r4, r5, lr}
 8000890:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000894:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000898:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800089c:	bf48      	it	mi
 800089e:	4240      	negmi	r0, r0
 80008a0:	f04f 0100 	mov.w	r1, #0
 80008a4:	e73e      	b.n	8000724 <__adddf3+0x138>
 80008a6:	bf00      	nop

080008a8 <__aeabi_f2d>:
 80008a8:	0042      	lsls	r2, r0, #1
 80008aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80008b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008b6:	bf1f      	itttt	ne
 80008b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008c4:	4770      	bxne	lr
 80008c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008ca:	bf08      	it	eq
 80008cc:	4770      	bxeq	lr
 80008ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008d2:	bf04      	itt	eq
 80008d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008d8:	4770      	bxeq	lr
 80008da:	b530      	push	{r4, r5, lr}
 80008dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	e71c      	b.n	8000724 <__adddf3+0x138>
 80008ea:	bf00      	nop

080008ec <__aeabi_ul2d>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	f04f 0500 	mov.w	r5, #0
 80008fa:	e00a      	b.n	8000912 <__aeabi_l2d+0x16>

080008fc <__aeabi_l2d>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	b530      	push	{r4, r5, lr}
 8000906:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800090a:	d502      	bpl.n	8000912 <__aeabi_l2d+0x16>
 800090c:	4240      	negs	r0, r0
 800090e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000912:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000916:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800091a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800091e:	f43f aed8 	beq.w	80006d2 <__adddf3+0xe6>
 8000922:	f04f 0203 	mov.w	r2, #3
 8000926:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800092a:	bf18      	it	ne
 800092c:	3203      	addne	r2, #3
 800092e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000932:	bf18      	it	ne
 8000934:	3203      	addne	r2, #3
 8000936:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800093a:	f1c2 0320 	rsb	r3, r2, #32
 800093e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	fa01 fe03 	lsl.w	lr, r1, r3
 800094a:	ea40 000e 	orr.w	r0, r0, lr
 800094e:	fa21 f102 	lsr.w	r1, r1, r2
 8000952:	4414      	add	r4, r2
 8000954:	e6bd      	b.n	80006d2 <__adddf3+0xe6>
 8000956:	bf00      	nop

08000958 <__aeabi_d2f>:
 8000958:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800095c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000960:	bf24      	itt	cs
 8000962:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000966:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096a:	d90d      	bls.n	8000988 <__aeabi_d2f+0x30>
 800096c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000970:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000974:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000978:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800097c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000980:	bf08      	it	eq
 8000982:	f020 0001 	biceq.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800098c:	d121      	bne.n	80009d2 <__aeabi_d2f+0x7a>
 800098e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000992:	bfbc      	itt	lt
 8000994:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000998:	4770      	bxlt	lr
 800099a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a2:	f1c2 0218 	rsb	r2, r2, #24
 80009a6:	f1c2 0c20 	rsb	ip, r2, #32
 80009aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ae:	fa20 f002 	lsr.w	r0, r0, r2
 80009b2:	bf18      	it	ne
 80009b4:	f040 0001 	orrne.w	r0, r0, #1
 80009b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c4:	ea40 000c 	orr.w	r0, r0, ip
 80009c8:	fa23 f302 	lsr.w	r3, r3, r2
 80009cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d0:	e7cc      	b.n	800096c <__aeabi_d2f+0x14>
 80009d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009d6:	d107      	bne.n	80009e8 <__aeabi_d2f+0x90>
 80009d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009dc:	bf1e      	ittt	ne
 80009de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009e6:	4770      	bxne	lr
 80009e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_frsub>:
 80009f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009fc:	e002      	b.n	8000a04 <__addsf3>
 80009fe:	bf00      	nop

08000a00 <__aeabi_fsub>:
 8000a00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a04 <__addsf3>:
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	bf1f      	itttt	ne
 8000a08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a0c:	ea92 0f03 	teqne	r2, r3
 8000a10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a18:	d06a      	beq.n	8000af0 <__addsf3+0xec>
 8000a1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a22:	bfc1      	itttt	gt
 8000a24:	18d2      	addgt	r2, r2, r3
 8000a26:	4041      	eorgt	r1, r0
 8000a28:	4048      	eorgt	r0, r1
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	bfb8      	it	lt
 8000a2e:	425b      	neglt	r3, r3
 8000a30:	2b19      	cmp	r3, #25
 8000a32:	bf88      	it	hi
 8000a34:	4770      	bxhi	lr
 8000a36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a42:	bf18      	it	ne
 8000a44:	4240      	negne	r0, r0
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a52:	bf18      	it	ne
 8000a54:	4249      	negne	r1, r1
 8000a56:	ea92 0f03 	teq	r2, r3
 8000a5a:	d03f      	beq.n	8000adc <__addsf3+0xd8>
 8000a5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a60:	fa41 fc03 	asr.w	ip, r1, r3
 8000a64:	eb10 000c 	adds.w	r0, r0, ip
 8000a68:	f1c3 0320 	rsb	r3, r3, #32
 8000a6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a74:	d502      	bpl.n	8000a7c <__addsf3+0x78>
 8000a76:	4249      	negs	r1, r1
 8000a78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a80:	d313      	bcc.n	8000aaa <__addsf3+0xa6>
 8000a82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a86:	d306      	bcc.n	8000a96 <__addsf3+0x92>
 8000a88:	0840      	lsrs	r0, r0, #1
 8000a8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a8e:	f102 0201 	add.w	r2, r2, #1
 8000a92:	2afe      	cmp	r2, #254	; 0xfe
 8000a94:	d251      	bcs.n	8000b3a <__addsf3+0x136>
 8000a96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a9e:	bf08      	it	eq
 8000aa0:	f020 0001 	biceq.w	r0, r0, #1
 8000aa4:	ea40 0003 	orr.w	r0, r0, r3
 8000aa8:	4770      	bx	lr
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	eb40 0000 	adc.w	r0, r0, r0
 8000ab0:	3a01      	subs	r2, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ab8:	d2ed      	bcs.n	8000a96 <__addsf3+0x92>
 8000aba:	fab0 fc80 	clz	ip, r0
 8000abe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ac6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aca:	bfaa      	itet	ge
 8000acc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad0:	4252      	neglt	r2, r2
 8000ad2:	4318      	orrge	r0, r3
 8000ad4:	bfbc      	itt	lt
 8000ad6:	40d0      	lsrlt	r0, r2
 8000ad8:	4318      	orrlt	r0, r3
 8000ada:	4770      	bx	lr
 8000adc:	f092 0f00 	teq	r2, #0
 8000ae0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae4:	bf06      	itte	eq
 8000ae6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aea:	3201      	addeq	r2, #1
 8000aec:	3b01      	subne	r3, #1
 8000aee:	e7b5      	b.n	8000a5c <__addsf3+0x58>
 8000af0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afe:	d021      	beq.n	8000b44 <__addsf3+0x140>
 8000b00:	ea92 0f03 	teq	r2, r3
 8000b04:	d004      	beq.n	8000b10 <__addsf3+0x10c>
 8000b06:	f092 0f00 	teq	r2, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	4608      	moveq	r0, r1
 8000b0e:	4770      	bx	lr
 8000b10:	ea90 0f01 	teq	r0, r1
 8000b14:	bf1c      	itt	ne
 8000b16:	2000      	movne	r0, #0
 8000b18:	4770      	bxne	lr
 8000b1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b1e:	d104      	bne.n	8000b2a <__addsf3+0x126>
 8000b20:	0040      	lsls	r0, r0, #1
 8000b22:	bf28      	it	cs
 8000b24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	4770      	bx	lr
 8000b2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b2e:	bf3c      	itt	cc
 8000b30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bxcc	lr
 8000b36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	4770      	bx	lr
 8000b44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b48:	bf16      	itet	ne
 8000b4a:	4608      	movne	r0, r1
 8000b4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b50:	4601      	movne	r1, r0
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	bf06      	itte	eq
 8000b56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5a:	ea90 0f01 	teqeq	r0, r1
 8000b5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_ui2f>:
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e004      	b.n	8000b74 <__aeabi_i2f+0x8>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_i2f>:
 8000b6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	bf48      	it	mi
 8000b72:	4240      	negmi	r0, r0
 8000b74:	ea5f 0c00 	movs.w	ip, r0
 8000b78:	bf08      	it	eq
 8000b7a:	4770      	bxeq	lr
 8000b7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b80:	4601      	mov	r1, r0
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	e01c      	b.n	8000bc2 <__aeabi_l2f+0x2a>

08000b88 <__aeabi_ul2f>:
 8000b88:	ea50 0201 	orrs.w	r2, r0, r1
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e00a      	b.n	8000bac <__aeabi_l2f+0x14>
 8000b96:	bf00      	nop

08000b98 <__aeabi_l2f>:
 8000b98:	ea50 0201 	orrs.w	r2, r0, r1
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__aeabi_l2f+0x14>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	ea5f 0c01 	movs.w	ip, r1
 8000bb0:	bf02      	ittt	eq
 8000bb2:	4684      	moveq	ip, r0
 8000bb4:	4601      	moveq	r1, r0
 8000bb6:	2000      	moveq	r0, #0
 8000bb8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bc6:	fabc f28c 	clz	r2, ip
 8000bca:	3a08      	subs	r2, #8
 8000bcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd0:	db10      	blt.n	8000bf4 <__aeabi_l2f+0x5c>
 8000bd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be4:	fa20 f202 	lsr.w	r2, r0, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	f020 0001 	biceq.w	r0, r0, #1
 8000bf2:	4770      	bx	lr
 8000bf4:	f102 0220 	add.w	r2, r2, #32
 8000bf8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfc:	f1c2 0220 	rsb	r2, r2, #32
 8000c00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c04:	fa21 f202 	lsr.w	r2, r1, r2
 8000c08:	eb43 0002 	adc.w	r0, r3, r2
 8000c0c:	bf08      	it	eq
 8000c0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c12:	4770      	bx	lr

08000c14 <__gesf2>:
 8000c14:	f04f 3cff 	mov.w	ip, #4294967295
 8000c18:	e006      	b.n	8000c28 <__cmpsf2+0x4>
 8000c1a:	bf00      	nop

08000c1c <__lesf2>:
 8000c1c:	f04f 0c01 	mov.w	ip, #1
 8000c20:	e002      	b.n	8000c28 <__cmpsf2+0x4>
 8000c22:	bf00      	nop

08000c24 <__cmpsf2>:
 8000c24:	f04f 0c01 	mov.w	ip, #1
 8000c28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3e:	d011      	beq.n	8000c64 <__cmpsf2+0x40>
 8000c40:	b001      	add	sp, #4
 8000c42:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c46:	bf18      	it	ne
 8000c48:	ea90 0f01 	teqne	r0, r1
 8000c4c:	bf58      	it	pl
 8000c4e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c52:	bf88      	it	hi
 8000c54:	17c8      	asrhi	r0, r1, #31
 8000c56:	bf38      	it	cc
 8000c58:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c5c:	bf18      	it	ne
 8000c5e:	f040 0001 	orrne.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	d102      	bne.n	8000c70 <__cmpsf2+0x4c>
 8000c6a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c6e:	d105      	bne.n	8000c7c <__cmpsf2+0x58>
 8000c70:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c74:	d1e4      	bne.n	8000c40 <__cmpsf2+0x1c>
 8000c76:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c7a:	d0e1      	beq.n	8000c40 <__cmpsf2+0x1c>
 8000c7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <__aeabi_cfrcmple>:
 8000c84:	4684      	mov	ip, r0
 8000c86:	4608      	mov	r0, r1
 8000c88:	4661      	mov	r1, ip
 8000c8a:	e7ff      	b.n	8000c8c <__aeabi_cfcmpeq>

08000c8c <__aeabi_cfcmpeq>:
 8000c8c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c8e:	f7ff ffc9 	bl	8000c24 <__cmpsf2>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	bf48      	it	mi
 8000c96:	f110 0f00 	cmnmi.w	r0, #0
 8000c9a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c9c <__aeabi_fcmpeq>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff fff4 	bl	8000c8c <__aeabi_cfcmpeq>
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2001      	moveq	r0, #1
 8000ca8:	2000      	movne	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fcmplt>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff ffea 	bl	8000c8c <__aeabi_cfcmpeq>
 8000cb8:	bf34      	ite	cc
 8000cba:	2001      	movcc	r0, #1
 8000cbc:	2000      	movcs	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_fcmple>:
 8000cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc8:	f7ff ffe0 	bl	8000c8c <__aeabi_cfcmpeq>
 8000ccc:	bf94      	ite	ls
 8000cce:	2001      	movls	r0, #1
 8000cd0:	2000      	movhi	r0, #0
 8000cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fcmpge>:
 8000cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cdc:	f7ff ffd2 	bl	8000c84 <__aeabi_cfrcmple>
 8000ce0:	bf94      	ite	ls
 8000ce2:	2001      	movls	r0, #1
 8000ce4:	2000      	movhi	r0, #0
 8000ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cea:	bf00      	nop

08000cec <__aeabi_fcmpgt>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff ffc8 	bl	8000c84 <__aeabi_cfrcmple>
 8000cf4:	bf34      	ite	cc
 8000cf6:	2001      	movcc	r0, #1
 8000cf8:	2000      	movcs	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_f2iz>:
 8000d00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d04:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d08:	d30f      	bcc.n	8000d2a <__aeabi_f2iz+0x2a>
 8000d0a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d0e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d12:	d90d      	bls.n	8000d30 <__aeabi_f2iz+0x30>
 8000d14:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d1c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d20:	fa23 f002 	lsr.w	r0, r3, r2
 8000d24:	bf18      	it	ne
 8000d26:	4240      	negne	r0, r0
 8000d28:	4770      	bx	lr
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	4770      	bx	lr
 8000d30:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d34:	d101      	bne.n	8000d3a <__aeabi_f2iz+0x3a>
 8000d36:	0242      	lsls	r2, r0, #9
 8000d38:	d105      	bne.n	8000d46 <__aeabi_f2iz+0x46>
 8000d3a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d3e:	bf08      	it	eq
 8000d40:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d44:	4770      	bx	lr
 8000d46:	f04f 0000 	mov.w	r0, #0
 8000d4a:	4770      	bx	lr

08000d4c <fbPosition>:

uint16_t volatile adc[5];
//int setpoint = 0;

float fbPosition()
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

    		measurement = -2.0 * 	(float)adc[0];
 8000d50:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <fbPosition+0x110>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff04 	bl	8000b64 <__aeabi_ui2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fda2 	bl	80008a8 <__aeabi_f2d>
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000d6c:	f7ff fa5a 	bl	8000224 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fdee 	bl	8000958 <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <fbPosition+0x114>)
 8000d80:	6013      	str	r3, [r2, #0]
    		measurement += -1.0 * 	(float)adc[1];
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <fbPosition+0x110>)
 8000d84:	885b      	ldrh	r3, [r3, #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff feeb 	bl	8000b64 <__aeabi_ui2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fd89 	bl	80008a8 <__aeabi_f2d>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4614      	mov	r4, r2
 8000d9c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <fbPosition+0x114>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fd7f 	bl	80008a8 <__aeabi_f2d>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4620      	mov	r0, r4
 8000db0:	4629      	mov	r1, r5
 8000db2:	f7ff fc1b 	bl	80005ec <__adddf3>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f7ff fdcb 	bl	8000958 <__aeabi_d2f>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <fbPosition+0x114>)
 8000dc6:	6013      	str	r3, [r2, #0]
    		measurement += 1.0 * 	(float)adc[3];
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <fbPosition+0x110>)
 8000dca:	88db      	ldrh	r3, [r3, #6]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fec8 	bl	8000b64 <__aeabi_ui2f>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd66 	bl	80008a8 <__aeabi_f2d>
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460d      	mov	r5, r1
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <fbPosition+0x114>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fd5f 	bl	80008a8 <__aeabi_f2d>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4620      	mov	r0, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	f7ff fbfb 	bl	80005ec <__adddf3>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fdab 	bl	8000958 <__aeabi_d2f>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <fbPosition+0x114>)
 8000e06:	6013      	str	r3, [r2, #0]
    		measurement += 2.0 *	(float)adc[4];	// rozjebany czujnik
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <fbPosition+0x110>)
 8000e0a:	891b      	ldrh	r3, [r3, #8]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fea8 	bl	8000b64 <__aeabi_ui2f>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fd46 	bl	80008a8 <__aeabi_f2d>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	f7ff fbe4 	bl	80005ec <__adddf3>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4614      	mov	r4, r2
 8000e2a:	461d      	mov	r5, r3
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <fbPosition+0x114>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fd39 	bl	80008a8 <__aeabi_f2d>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff fbd5 	bl	80005ec <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fd85 	bl	8000958 <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <fbPosition+0x114>)
 8000e52:	6013      	str	r3, [r2, #0]
	return 	measurement;
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <fbPosition+0x114>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e5c:	200000ec 	.word	0x200000ec
 8000e60:	200000e8 	.word	0x200000e8

08000e64 <PIDController_Init>:
}PIDController;

PIDController pid;

void 	PIDController_Init(PIDController *pid)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	pid->prevError  = 0.0f;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]

	pid->differentiator  = 0.0f;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
	pid->prevMeasurement = 0.0f;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]

	pid->out = 0.0f;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]

	pid->Kp = 30.0;//20
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <PIDController_Init+0x40>)
 8000e90:	601a      	str	r2, [r3, #0]
	pid->Kd = 1;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e98:	605a      	str	r2, [r3, #4]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	41f00000 	.word	0x41f00000

08000ea8 <PIDController_Update>:
float 	PIDController_Update(PIDController *pid, float setpoint, float fbPosition)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	float error = setpoint - fbPosition;
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	68b8      	ldr	r0, [r7, #8]
 8000eb8:	f7ff fda2 	bl	8000a00 <__aeabi_fsub>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	617b      	str	r3, [r7, #20]

    pid->differentiator = pid->Kd*(error-pid->prevError);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685c      	ldr	r4, [r3, #4]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff fd98 	bl	8000a00 <__aeabi_fsub>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f7ff facf 	bl	8000478 <__aeabi_fmul>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	60da      	str	r2, [r3, #12]

	pid->out = pid->Kp * error + pid->differentiator;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6979      	ldr	r1, [r7, #20]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fac5 	bl	8000478 <__aeabi_fmul>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	f7ff fd83 	bl	8000a04 <__addsf3>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	615a      	str	r2, [r3, #20]

	pid->prevError = error;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	609a      	str	r2, [r3, #8]
	pid->prevMeasurement = fbPosition;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]

    return pid->out;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	695b      	ldr	r3, [r3, #20]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd90      	pop	{r4, r7, pc}
	...

08000f20 <leftMotor>:

int leftMotor(float leftPWM)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	leftPWM = PWM_MAX - leftPWM;
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <leftMotor+0x4c>)
 8000f2c:	f7ff fd68 	bl	8000a00 <__aeabi_fsub>
 8000f30:	4603      	mov	r3, r0
 8000f32:	607b      	str	r3, [r7, #4]
	if(PWM_MAX < leftPWM) leftPWM = PWM_MAX;
 8000f34:	490d      	ldr	r1, [pc, #52]	; (8000f6c <leftMotor+0x4c>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fed8 	bl	8000cec <__aeabi_fcmpgt>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <leftMotor+0x26>
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <leftMotor+0x4c>)
 8000f44:	607b      	str	r3, [r7, #4]
	if(0.0 > leftPWM) leftPWM = 0.0;
 8000f46:	f04f 0100 	mov.w	r1, #0
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff feb0 	bl	8000cb0 <__aeabi_fcmplt>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <leftMotor+0x3c>
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
	return (int)leftPWM;
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fecf 	bl	8000d00 <__aeabi_f2iz>
 8000f62:	4603      	mov	r3, r0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	461c4000 	.word	0x461c4000

08000f70 <rightMotor>:

int rightMotor(float rightPWM)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	rightPWM = PWM_MAX + rightPWM;
 8000f78:	4910      	ldr	r1, [pc, #64]	; (8000fbc <rightMotor+0x4c>)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fd42 	bl	8000a04 <__addsf3>
 8000f80:	4603      	mov	r3, r0
 8000f82:	607b      	str	r3, [r7, #4]
	if(PWM_MAX < rightPWM) rightPWM = PWM_MAX;
 8000f84:	490d      	ldr	r1, [pc, #52]	; (8000fbc <rightMotor+0x4c>)
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff feb0 	bl	8000cec <__aeabi_fcmpgt>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <rightMotor+0x26>
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <rightMotor+0x4c>)
 8000f94:	607b      	str	r3, [r7, #4]
		if(0.0 > rightPWM) rightPWM = 0.0;
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fe88 	bl	8000cb0 <__aeabi_fcmplt>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <rightMotor+0x3c>
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
		return (int)rightPWM;
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fea7 	bl	8000d00 <__aeabi_f2iz>
 8000fb2:	4603      	mov	r3, r0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	461c4000 	.word	0x461c4000

08000fc0 <motors>:

void motors(int leftMotor, int rightMotor)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, leftMotor);
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <motors+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, rightMotor);
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <motors+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	200000a0 	.word	0x200000a0

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fbc7 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f869 	bl	80010c8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 f9cd 	bl	8001394 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffa:	f000 f8b5 	bl	8001168 <MX_ADC1_Init>
  MX_DMA_Init();
 8000ffe:	f000 f9ab 	bl	8001358 <MX_DMA_Init>
  MX_TIM2_Init();
 8001002:	f000 f929 	bl	8001258 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Init(&hdma_adc1);
 8001006:	4828      	ldr	r0, [pc, #160]	; (80010a8 <main+0xc0>)
 8001008:	f001 fbc2 	bl	8002790 <HAL_DMA_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc, 5);
 800100c:	2205      	movs	r2, #5
 800100e:	4927      	ldr	r1, [pc, #156]	; (80010ac <main+0xc4>)
 8001010:	4827      	ldr	r0, [pc, #156]	; (80010b0 <main+0xc8>)
 8001012:	f000 fe01 	bl	8001c18 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 8001016:	4826      	ldr	r0, [pc, #152]	; (80010b0 <main+0xc8>)
 8001018:	f000 fd7c 	bl	8001b14 <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim2);
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <main+0xcc>)
 800101e:	f003 f9af 	bl	8004380 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <main+0xcc>)
 8001026:	f003 fadf 	bl	80045e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800102a:	2104      	movs	r1, #4
 800102c:	4821      	ldr	r0, [pc, #132]	; (80010b4 <main+0xcc>)
 800102e:	f003 fadb 	bl	80045e8 <HAL_TIM_PWM_Start>
  PIDController_Init(&pid);
 8001032:	4821      	ldr	r0, [pc, #132]	; (80010b8 <main+0xd0>)
 8001034:	f7ff ff16 	bl	8000e64 <PIDController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	481f      	ldr	r0, [pc, #124]	; (80010bc <main+0xd4>)
 800103e:	f002 fa53 	bl	80034e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(I1_GPIO_Port, I1_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <main+0xd8>)
 8001048:	f002 fa4e 	bl	80034e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(I2_GPIO_Port, I2_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <main+0xd4>)
 8001054:	f002 fa48 	bl	80034e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(I3_GPIO_Port, I3_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105e:	4817      	ldr	r0, [pc, #92]	; (80010bc <main+0xd4>)
 8001060:	f002 fa42 	bl	80034e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(I4_GPIO_Port, I4_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <main+0xd4>)
 800106c:	f002 fa3c 	bl	80034e8 <HAL_GPIO_WritePin>

	  float pid_output = PIDController_Update(&pid, 0.0, fbPosition());
 8001070:	f7ff fe6c 	bl	8000d4c <fbPosition>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	f04f 0100 	mov.w	r1, #0
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <main+0xd0>)
 800107e:	f7ff ff13 	bl	8000ea8 <PIDController_Update>
 8001082:	6078      	str	r0, [r7, #4]
	  if (debug == 1)  motors(leftMotor(pid_output),rightMotor(pid_output));
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <main+0xdc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d1d5      	bne.n	8001038 <main+0x50>
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <leftMotor>
 8001092:	4604      	mov	r4, r0
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff6b 	bl	8000f70 <rightMotor>
 800109a:	4603      	mov	r3, r0
 800109c:	4619      	mov	r1, r3
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff ff8e 	bl	8000fc0 <motors>
  {
 80010a4:	e7c8      	b.n	8001038 <main+0x50>
 80010a6:	bf00      	nop
 80010a8:	2000005c 	.word	0x2000005c
 80010ac:	200000ec 	.word	0x200000ec
 80010b0:	2000002c 	.word	0x2000002c
 80010b4:	200000a0 	.word	0x200000a0
 80010b8:	200000f8 	.word	0x200000f8
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	20000000 	.word	0x20000000

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b092      	sub	sp, #72	; 0x48
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2228      	movs	r2, #40	; 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 faa8 	bl	800562c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fa:	2301      	movs	r3, #1
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fe:	2310      	movs	r3, #16
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fa1e 	bl	800354c <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8001116:	f000 f99d 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fd77 	bl	8003c28 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001140:	f000 f988 	bl	8001454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001144:	2302      	movs	r3, #2
 8001146:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f002 ff76 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800115a:	f000 f97b 	bl	8001454 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3748      	adds	r7, #72	; 0x48
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <MX_ADC1_Init+0xe8>)
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <MX_ADC1_Init+0xec>)
 800117c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <MX_ADC1_Init+0xe8>)
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MX_ADC1_Init+0xe8>)
 8001188:	2201      	movs	r2, #1
 800118a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <MX_ADC1_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <MX_ADC1_Init+0xe8>)
 8001194:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001198:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_ADC1_Init+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_ADC1_Init+0xe8>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a6:	482a      	ldr	r0, [pc, #168]	; (8001250 <MX_ADC1_Init+0xe8>)
 80011a8:	f000 fb4c 	bl	8001844 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011b2:	f000 f94f 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80011be:	2303      	movs	r3, #3
 80011c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4822      	ldr	r0, [pc, #136]	; (8001250 <MX_ADC1_Init+0xe8>)
 80011c8:	f000 fede 	bl	8001f88 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f93f 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011da:	2302      	movs	r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	481b      	ldr	r0, [pc, #108]	; (8001250 <MX_ADC1_Init+0xe8>)
 80011e4:	f000 fed0 	bl	8001f88 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f000 f931 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011f6:	2303      	movs	r3, #3
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_ADC1_Init+0xe8>)
 8001200:	f000 fec2 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800120a:	f000 f923 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800120e:	2303      	movs	r3, #3
 8001210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001212:	2304      	movs	r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_ADC1_Init+0xe8>)
 800121c:	f000 feb4 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001226:	f000 f915 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800122a:	2305      	movs	r3, #5
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800122e:	2305      	movs	r3, #5
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_ADC1_Init+0xe8>)
 8001238:	f000 fea6 	bl	8001f88 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001242:	f000 f907 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000002c 	.word	0x2000002c
 8001254:	40012400 	.word	0x40012400

08001258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	; 0x38
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_TIM2_Init+0xfc>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <MX_TIM2_Init+0xfc>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_TIM2_Init+0xfc>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_TIM2_Init+0xfc>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_TIM2_Init+0xfc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_TIM2_Init+0xfc>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4828      	ldr	r0, [pc, #160]	; (8001354 <MX_TIM2_Init+0xfc>)
 80012b2:	f002 ffad 	bl	8004210 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012bc:	f000 f8ca 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4821      	ldr	r0, [pc, #132]	; (8001354 <MX_TIM2_Init+0xfc>)
 80012ce:	f003 fbd9 	bl	8004a84 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012d8:	f000 f8bc 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <MX_TIM2_Init+0xfc>)
 80012de:	f003 f8c1 	bl	8004464 <HAL_TIM_PWM_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012e8:	f000 f8b4 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4619      	mov	r1, r3
 80012fa:	4816      	ldr	r0, [pc, #88]	; (8001354 <MX_TIM2_Init+0xfc>)
 80012fc:	f004 f8ba 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001306:	f000 f8a5 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130a:	2360      	movs	r3, #96	; 0x60
 800130c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM2_Init+0xfc>)
 8001322:	f003 fa41 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800132c:	f000 f892 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2204      	movs	r2, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM2_Init+0xfc>)
 8001338:	f003 fa36 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001342:	f000 f887 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM2_Init+0xfc>)
 8001348:	f000 f952 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 800134c:	bf00      	nop
 800134e:	3738      	adds	r7, #56	; 0x38
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000a0 	.word	0x200000a0

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_DMA_Init+0x38>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <MX_DMA_Init+0x38>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6153      	str	r3, [r2, #20]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_DMA_Init+0x38>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	200b      	movs	r0, #11
 800137c:	f001 f9b8 	bl	80026f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001380:	200b      	movs	r0, #11
 8001382:	f001 f9e1 	bl	8002748 <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a26      	ldr	r2, [pc, #152]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_GPIO_Init+0xb4>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, I4_Pin|I3_Pin|I2_Pin|LED_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f24e 0140 	movw	r1, #57408	; 0xe040
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_GPIO_Init+0xb8>)
 80013f8:	f002 f876 	bl	80034e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I1_GPIO_Port, I1_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_GPIO_Init+0xbc>)
 8001402:	f002 f871 	bl	80034e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I4_Pin I3_Pin I2_Pin LED_Pin */
  GPIO_InitStruct.Pin = I4_Pin|I3_Pin|I2_Pin|LED_Pin;
 8001406:	f24e 0340 	movw	r3, #57408	; 0xe040
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2302      	movs	r3, #2
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <MX_GPIO_Init+0xb8>)
 8001420:	f001 fdce 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I1_Pin */
  GPIO_InitStruct.Pin = I1_Pin;
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_GPIO_Init+0xbc>)
 800143c:	f001 fdc0 	bl	8002fc0 <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40011000 	.word	0x40011000

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>

0800145e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
	...

08001474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_MspInit+0x5c>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_MspInit+0x5c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_MspInit+0x5c>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_MspInit+0x5c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_MspInit+0x60>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_MspInit+0x60>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000

080014d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <HAL_ADC_MspInit+0xcc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d151      	bne.n	800159c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_ADC_MspInit+0xd0>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <HAL_ADC_MspInit+0xd0>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_ADC_MspInit+0xd0>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_ADC_MspInit+0xd0>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <HAL_ADC_MspInit+0xd0>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_ADC_MspInit+0xd0>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001528:	232f      	movs	r3, #47	; 0x2f
 800152a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	481d      	ldr	r0, [pc, #116]	; (80015ac <HAL_ADC_MspInit+0xd4>)
 8001538:	f001 fd42 	bl	8002fc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_ADC_MspInit+0xdc>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001566:	2220      	movs	r2, #32
 8001568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001572:	f001 f90d 	bl	8002790 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800157c:	f7ff ff6a 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001584:	621a      	str	r2, [r3, #32]
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_ADC_MspInit+0xd8>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2012      	movs	r0, #18
 8001592:	f001 f8ad 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001596:	2012      	movs	r0, #18
 8001598:	f001 f8d6 	bl	8002748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40012400 	.word	0x40012400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	2000005c 	.word	0x2000005c
 80015b4:	40020008 	.word	0x40020008

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c8:	d10b      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_TIM_Base_MspInit+0x34>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_TIM_Base_MspInit+0x34>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_TIM_Base_MspInit+0x34>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160e:	d142      	bne.n	8001696 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4813      	ldr	r0, [pc, #76]	; (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 8001656:	f001 fcb3 	bl	8002fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800165a:	2308      	movs	r3, #8
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2302      	movs	r3, #2
 8001664:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <HAL_TIM_MspPostInit+0xb8>)
 800166e:	f001 fca7 	bl	8002fc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_TIM_MspPostInit+0xbc>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_TIM_MspPostInit+0xbc>)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40010000 	.word	0x40010000

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 f889 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Channel1_IRQHandler+0x10>)
 8001706:	f001 f9f1 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000005c 	.word	0x2000005c

08001714 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <ADC1_IRQHandler+0x10>)
 800171a:	f000 fb25 	bl	8001d68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000002c 	.word	0x2000002c

08001728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800175a:	f7ff ffe5 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f003 ff41 	bl	80055e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001762:	f7ff fc41 	bl	8000fe8 <main>
  bx lr
 8001766:	4770      	bx	lr
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001770:	0800584c 	.word	0x0800584c
  ldr r2, =_sbss
 8001774:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001778:	20000114 	.word	0x20000114

0800177c <DMA1_Channel2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800177c:	e7fe      	b.n	800177c <DMA1_Channel2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_Init+0x28>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_Init+0x28>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 ff8d 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fe6a 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 ffd4 	bl	8002778 <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 ff82 	bl	80026f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000004 	.word	0x20000004
 8001804:	2000000c 	.word	0x2000000c
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x1c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x20>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_IncTick+0x20>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	2000000c 	.word	0x2000000c
 800182c:	20000110 	.word	0x20000110

08001830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_GetTick+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000110 	.word	0x20000110

08001844 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e152      	b.n	8001b0c <HAL_ADC_Init+0x2c8>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a97      	ldr	r2, [pc, #604]	; (8001ac8 <HAL_ADC_Init+0x284>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d004      	beq.n	800187a <HAL_ADC_Init+0x36>
 8001870:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001874:	4895      	ldr	r0, [pc, #596]	; (8001acc <HAL_ADC_Init+0x288>)
 8001876:	f7ff fdf2 	bl	800145e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_ADC_Init+0x52>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800188a:	d004      	beq.n	8001896 <HAL_ADC_Init+0x52>
 800188c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001890:	488e      	ldr	r0, [pc, #568]	; (8001acc <HAL_ADC_Init+0x288>)
 8001892:	f7ff fde4 	bl	800145e <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_ADC_Init+0x6e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a6:	d004      	beq.n	80018b2 <HAL_ADC_Init+0x6e>
 80018a8:	f240 11b5 	movw	r1, #437	; 0x1b5
 80018ac:	4887      	ldr	r0, [pc, #540]	; (8001acc <HAL_ADC_Init+0x288>)
 80018ae:	f7ff fdd6 	bl	800145e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_ADC_Init+0x88>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7b1b      	ldrb	r3, [r3, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d004      	beq.n	80018cc <HAL_ADC_Init+0x88>
 80018c2:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80018c6:	4881      	ldr	r0, [pc, #516]	; (8001acc <HAL_ADC_Init+0x288>)
 80018c8:	f7ff fdc9 	bl	800145e <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d027      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018dc:	d022      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80018e6:	d01d      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018f0:	d018      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80018fa:	d013      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001904:	d00e      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800190e:	d009      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001918:	d004      	beq.n	8001924 <HAL_ADC_Init+0xe0>
 800191a:	f240 11b7 	movw	r1, #439	; 0x1b7
 800191e:	486b      	ldr	r0, [pc, #428]	; (8001acc <HAL_ADC_Init+0x288>)
 8001920:	f7ff fd9d 	bl	800145e <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02a      	beq.n	8001982 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_ADC_Init+0xf8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d904      	bls.n	8001946 <HAL_ADC_Init+0x102>
 800193c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001940:	4862      	ldr	r0, [pc, #392]	; (8001acc <HAL_ADC_Init+0x288>)
 8001942:	f7ff fd8c 	bl	800145e <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7d1b      	ldrb	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_ADC_Init+0x11c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7d1b      	ldrb	r3, [r3, #20]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d004      	beq.n	8001960 <HAL_ADC_Init+0x11c>
 8001956:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800195a:	485c      	ldr	r0, [pc, #368]	; (8001acc <HAL_ADC_Init+0x288>)
 800195c:	f7ff fd7f 	bl	800145e <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7d1b      	ldrb	r3, [r3, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_ADC_Init+0x134>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b08      	cmp	r3, #8
 8001976:	d904      	bls.n	8001982 <HAL_ADC_Init+0x13e>
 8001978:	f240 11bf 	movw	r1, #447	; 0x1bf
 800197c:	4853      	ldr	r0, [pc, #332]	; (8001acc <HAL_ADC_Init+0x288>)
 800197e:	f7ff fd6e 	bl	800145e <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fd9d 	bl	80014d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fd0a 	bl	80023b8 <ADC_ConversionStop_Disable>
 80019a4:	4603      	mov	r3, r0
 80019a6:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 80a2 	bne.w	8001afa <HAL_ADC_Init+0x2b6>
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 809e 	bne.w	8001afa <HAL_ADC_Init+0x2b6>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019c6:	f023 0302 	bic.w	r3, r3, #2
 80019ca:	f043 0202 	orr.w	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019da:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7b1b      	ldrb	r3, [r3, #12]
 80019e0:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019e2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f2:	d003      	beq.n	80019fc <HAL_ADC_Init+0x1b8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d102      	bne.n	8001a02 <HAL_ADC_Init+0x1be>
 80019fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a00:	e000      	b.n	8001a04 <HAL_ADC_Init+0x1c0>
 8001a02:	2300      	movs	r3, #0
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7d1b      	ldrb	r3, [r3, #20]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d119      	bne.n	8001a46 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7b1b      	ldrb	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	035a      	lsls	r2, r3, #13
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e00b      	b.n	8001a46 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	f043 0220 	orr.w	r2, r3, #32
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_ADC_Init+0x28c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a76:	d003      	beq.n	8001a80 <HAL_ADC_Init+0x23c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d104      	bne.n	8001a8a <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	051b      	lsls	r3, r3, #20
 8001a88:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_ADC_Init+0x290>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d114      	bne.n	8001ad8 <HAL_ADC_Init+0x294>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ac4:	e021      	b.n	8001b0a <HAL_ADC_Init+0x2c6>
 8001ac6:	bf00      	nop
 8001ac8:	40012400 	.word	0x40012400
 8001acc:	08005654 	.word	0x08005654
 8001ad0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ad4:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f023 0312 	bic.w	r3, r3, #18
 8001ae0:	f043 0210 	orr.w	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x2c6>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_ADC_Start+0xfc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d004      	beq.n	8001b34 <HAL_ADC_Start+0x20>
 8001b2a:	f240 411b 	movw	r1, #1051	; 0x41b
 8001b2e:	4839      	ldr	r0, [pc, #228]	; (8001c14 <HAL_ADC_Start+0x100>)
 8001b30:	f7ff fc95 	bl	800145e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Start+0x2e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e062      	b.n	8001c08 <HAL_ADC_Start+0xf4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fbda 	bl	8002304 <ADC_Enable>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d151      	bne.n	8001bfe <HAL_ADC_Start+0xea>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_ADC_Start+0x84>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_ADC_Start+0x9e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f023 0206 	bic.w	r2, r3, #6
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb0:	e002      	b.n	8001bb8 <HAL_ADC_Start+0xa4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0202 	mvn.w	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bd8:	d108      	bne.n	8001bec <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	e00c      	b.n	8001c06 <HAL_ADC_Start+0xf2>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e003      	b.n	8001c06 <HAL_ADC_Start+0xf2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40012400 	.word	0x40012400
 8001c14:	08005654 	.word	0x08005654

08001c18 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a49      	ldr	r2, [pc, #292]	; (8001d54 <HAL_ADC_Start_DMA+0x13c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_Start_DMA+0x24>
 8001c32:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001c36:	4848      	ldr	r0, [pc, #288]	; (8001d58 <HAL_ADC_Start_DMA+0x140>)
 8001c38:	f7ff fc11 	bl	800145e <assert_failed>
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Start_DMA+0x32>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e080      	b.n	8001d4c <HAL_ADC_Start_DMA+0x134>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fb56 	bl	8002304 <ADC_Enable>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d16f      	bne.n	8001d42 <HAL_ADC_Start_DMA+0x12a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_ADC_Start_DMA+0x88>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_ADC_Start_DMA+0xa2>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f023 0206 	bic.w	r2, r3, #6
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_Start_DMA+0xa8>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_ADC_Start_DMA+0x144>)
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_ADC_Start_DMA+0x148>)
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_ADC_Start_DMA+0x14c>)
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0202 	mvn.w	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a18      	ldr	r0, [r3, #32]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	334c      	adds	r3, #76	; 0x4c
 8001d04:	4619      	mov	r1, r3
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f000 fe81 	bl	8002a10 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d1c:	d108      	bne.n	8001d30 <HAL_ADC_Start_DMA+0x118>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	e00c      	b.n	8001d4a <HAL_ADC_Start_DMA+0x132>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_Start_DMA+0x132>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40012400 	.word	0x40012400
 8001d58:	08005654 	.word	0x08005654
 8001d5c:	0800243b 	.word	0x0800243b
 8001d60:	080024b7 	.word	0x080024b7
 8001d64:	080024d3 	.word	0x080024d3

08001d68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a70      	ldr	r2, [pc, #448]	; (8001f38 <HAL_ADC_IRQHandler+0x1d0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_IRQHandler+0x1c>
 8001d7a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001d7e:	486f      	ldr	r0, [pc, #444]	; (8001f3c <HAL_ADC_IRQHandler+0x1d4>)
 8001d80:	f7ff fb6d 	bl	800145e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7b1b      	ldrb	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_ADC_IRQHandler+0x36>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d004      	beq.n	8001d9e <HAL_ADC_IRQHandler+0x36>
 8001d94:	f240 7101 	movw	r1, #1793	; 0x701
 8001d98:	4868      	ldr	r0, [pc, #416]	; (8001f3c <HAL_ADC_IRQHandler+0x1d4>)
 8001d9a:	f7ff fb60 	bl	800145e <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_ADC_IRQHandler+0x46>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d904      	bls.n	8001db8 <HAL_ADC_IRQHandler+0x50>
 8001dae:	f240 7102 	movw	r1, #1794	; 0x702
 8001db2:	4862      	ldr	r0, [pc, #392]	; (8001f3c <HAL_ADC_IRQHandler+0x1d4>)
 8001db4:	f7ff fb53 	bl	800145e <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d140      	bne.n	8001e48 <HAL_ADC_IRQHandler+0xe0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d139      	bne.n	8001e48 <HAL_ADC_IRQHandler+0xe0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_IRQHandler+0x84>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001df6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dfa:	d11d      	bne.n	8001e38 <HAL_ADC_IRQHandler+0xd0>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d119      	bne.n	8001e38 <HAL_ADC_IRQHandler+0xd0>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0220 	bic.w	r2, r2, #32
 8001e12:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_IRQHandler+0xd0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f881 	bl	8001f40 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0212 	mvn.w	r2, #18
 8001e46:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d14f      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x18e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d148      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x18e>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_IRQHandler+0x114>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001e86:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001e8a:	d012      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x14a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d125      	bne.n	8001ee6 <HAL_ADC_IRQHandler+0x17e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ea4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ea8:	d11d      	bne.n	8001ee6 <HAL_ADC_IRQHandler+0x17e>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <HAL_ADC_IRQHandler+0x17e>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_ADC_IRQHandler+0x17e>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fb0d 	bl	8002506 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 020c 	mvn.w	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d114      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x1c6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10d      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x1c6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f820 	bl	8001f64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012400 	.word	0x40012400
 8001f3c:	08005654 	.word	0x08005654

08001f40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a86      	ldr	r2, [pc, #536]	; (80021b8 <HAL_ADC_ConfigChannel+0x230>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x26>
 8001fa4:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8001fa8:	4884      	ldr	r0, [pc, #528]	; (80021bc <HAL_ADC_ConfigChannel+0x234>)
 8001faa:	f7ff fa58 	bl	800145e <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d048      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d044      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d040      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d03c      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d038      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d034      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d030      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	d02c      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d028      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b09      	cmp	r3, #9
 8001ffc:	d024      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b0a      	cmp	r3, #10
 8002004:	d020      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b0b      	cmp	r3, #11
 800200c:	d01c      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d018      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b0d      	cmp	r3, #13
 800201c:	d014      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b0e      	cmp	r3, #14
 8002024:	d010      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	d00c      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b10      	cmp	r3, #16
 8002034:	d008      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b11      	cmp	r3, #17
 800203c:	d004      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xc0>
 800203e:	f240 71de 	movw	r1, #2014	; 0x7de
 8002042:	485e      	ldr	r0, [pc, #376]	; (80021bc <HAL_ADC_ConfigChannel+0x234>)
 8002044:	f7ff fa0b 	bl	800145e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d040      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d03c      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d038      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d034      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d030      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b06      	cmp	r3, #6
 8002076:	d02c      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b07      	cmp	r3, #7
 800207e:	d028      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d024      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d020      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b0a      	cmp	r3, #10
 8002096:	d01c      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b0b      	cmp	r3, #11
 800209e:	d018      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d014      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b0d      	cmp	r3, #13
 80020ae:	d010      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0e      	cmp	r3, #14
 80020b6:	d00c      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	d008      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d004      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x14a>
 80020c8:	f240 71df 	movw	r1, #2015	; 0x7df
 80020cc:	483b      	ldr	r0, [pc, #236]	; (80021bc <HAL_ADC_ConfigChannel+0x234>)
 80020ce:	f7ff f9c6 	bl	800145e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d01c      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d018      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d014      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d010      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d00c      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d008      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b07      	cmp	r3, #7
 8002110:	d004      	beq.n	800211c <HAL_ADC_ConfigChannel+0x194>
 8002112:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002116:	4829      	ldr	r0, [pc, #164]	; (80021bc <HAL_ADC_ConfigChannel+0x234>)
 8002118:	f7ff f9a1 	bl	800145e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x1a2>
 8002126:	2302      	movs	r3, #2
 8002128:	e0e1      	b.n	80022ee <HAL_ADC_ConfigChannel+0x366>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d81c      	bhi.n	8002174 <HAL_ADC_ConfigChannel+0x1ec>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b05      	subs	r3, #5
 800214c:	221f      	movs	r2, #31
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	4019      	ands	r1, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	3b05      	subs	r3, #5
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
 8002172:	e041      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x270>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d821      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0x238>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b23      	subs	r3, #35	; 0x23
 800218e:	221f      	movs	r2, #31
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b23      	subs	r3, #35	; 0x23
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	e020      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x270>
 80021b6:	bf00      	nop
 80021b8:	40012400 	.word	0x40012400
 80021bc:	08005654 	.word	0x08005654
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b41      	subs	r3, #65	; 0x41
 80021d2:	221f      	movs	r2, #31
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	4019      	ands	r1, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b41      	subs	r3, #65	; 0x41
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d91c      	bls.n	800223a <HAL_ADC_ConfigChannel+0x2b2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6898      	ldr	r0, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	3b1e      	subs	r3, #30
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	e019      	b.n	800226e <HAL_ADC_ConfigChannel+0x2e6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	2207      	movs	r2, #7
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	4019      	ands	r1, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6898      	ldr	r0, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b10      	cmp	r3, #16
 8002274:	d003      	beq.n	800227e <HAL_ADC_ConfigChannel+0x2f6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800227a:	2b11      	cmp	r3, #17
 800227c:	d132      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x35c>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_ADC_ConfigChannel+0x370>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d125      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x34c>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d126      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x35c>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d11a      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x35c>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_ADC_ConfigChannel+0x374>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_ADC_ConfigChannel+0x378>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9a      	lsrs	r2, r3, #18
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_ConfigChannel+0x344>
          {
            wait_loop_index--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x33e>
 80022d2:	e007      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x35c>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40012400 	.word	0x40012400
 80022fc:	20000004 	.word	0x20000004
 8002300:	431bde83 	.word	0x431bde83

08002304 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d040      	beq.n	80023a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <ADC_Enable+0xac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <ADC_Enable+0xb0>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	0c9b      	lsrs	r3, r3, #18
 800233e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002340:	e002      	b.n	8002348 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3b01      	subs	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f9      	bne.n	8002342 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800234e:	f7ff fa6f 	bl	8001830 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002354:	e01f      	b.n	8002396 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002356:	f7ff fa6b 	bl	8001830 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d918      	bls.n	8002396 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d011      	beq.n	8002396 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e007      	b.n	80023a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d1d8      	bne.n	8002356 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000004 	.word	0x20000004
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d12e      	bne.n	8002430 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023e2:	f7ff fa25 	bl	8001830 <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023e8:	e01b      	b.n	8002422 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023ea:	f7ff fa21 	bl	8001830 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d914      	bls.n	8002422 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10d      	bne.n	8002422 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e007      	b.n	8002432 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d0dc      	beq.n	80023ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002450:	2b00      	cmp	r3, #0
 8002452:	d127      	bne.n	80024a4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800246a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800246e:	d115      	bne.n	800249c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fd4f 	bl	8001f40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024a2:	e004      	b.n	80024ae <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fd44 	bl	8001f52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	f043 0204 	orr.w	r2, r3, #4
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fd3c 	bl	8001f76 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4906      	ldr	r1, [pc, #24]	; (80025b0 <__NVIC_EnableIRQ+0x34>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff90 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	d00f      	beq.n	80026de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b06      	cmp	r3, #6
 80026c2:	d00c      	beq.n	80026de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d009      	beq.n	80026de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d006      	beq.n	80026de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d003      	beq.n	80026de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026d6:	2192      	movs	r1, #146	; 0x92
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80026da:	f7fe fec0 	bl	800145e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff1a 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	0800568c 	.word	0x0800568c

080026f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d903      	bls.n	8002710 <HAL_NVIC_SetPriority+0x20>
 8002708:	21aa      	movs	r1, #170	; 0xaa
 800270a:	480e      	ldr	r0, [pc, #56]	; (8002744 <HAL_NVIC_SetPriority+0x54>)
 800270c:	f7fe fea7 	bl	800145e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	d903      	bls.n	800271e <HAL_NVIC_SetPriority+0x2e>
 8002716:	21ab      	movs	r1, #171	; 0xab
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <HAL_NVIC_SetPriority+0x54>)
 800271a:	f7fe fea0 	bl	800145e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271e:	f7ff ff1f 	bl	8002560 <__NVIC_GetPriorityGrouping>
 8002722:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	6978      	ldr	r0, [r7, #20]
 800272a:	f7ff ff6d 	bl	8002608 <NVIC_EncodePriority>
 800272e:	4602      	mov	r2, r0
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff3c 	bl	80025b4 <__NVIC_SetPriority>
}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	0800568c 	.word	0x0800568c

08002748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da03      	bge.n	8002762 <HAL_NVIC_EnableIRQ+0x1a>
 800275a:	21be      	movs	r1, #190	; 0xbe
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <HAL_NVIC_EnableIRQ+0x2c>)
 800275e:	f7fe fe7e 	bl	800145e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff08 	bl	800257c <__NVIC_EnableIRQ>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	0800568c 	.word	0x0800568c

08002778 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff73 	bl	800266c <SysTick_Config>
 8002786:	4603      	mov	r3, r0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e109      	b.n	80029ba <HAL_DMA_Init+0x22a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a86      	ldr	r2, [pc, #536]	; (80029c4 <HAL_DMA_Init+0x234>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d03a      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a84      	ldr	r2, [pc, #528]	; (80029c8 <HAL_DMA_Init+0x238>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d035      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a83      	ldr	r2, [pc, #524]	; (80029cc <HAL_DMA_Init+0x23c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d030      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a81      	ldr	r2, [pc, #516]	; (80029d0 <HAL_DMA_Init+0x240>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02b      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_DMA_Init+0x244>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d026      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a7e      	ldr	r2, [pc, #504]	; (80029d8 <HAL_DMA_Init+0x248>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d021      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7d      	ldr	r2, [pc, #500]	; (80029dc <HAL_DMA_Init+0x24c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01c      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7b      	ldr	r2, [pc, #492]	; (80029e0 <HAL_DMA_Init+0x250>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d017      	beq.n	8002826 <HAL_DMA_Init+0x96>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7a      	ldr	r2, [pc, #488]	; (80029e4 <HAL_DMA_Init+0x254>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d012      	beq.n	8002826 <HAL_DMA_Init+0x96>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a78      	ldr	r2, [pc, #480]	; (80029e8 <HAL_DMA_Init+0x258>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_DMA_Init+0x96>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a77      	ldr	r2, [pc, #476]	; (80029ec <HAL_DMA_Init+0x25c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d008      	beq.n	8002826 <HAL_DMA_Init+0x96>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a75      	ldr	r2, [pc, #468]	; (80029f0 <HAL_DMA_Init+0x260>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <HAL_DMA_Init+0x96>
 800281e:	219a      	movs	r1, #154	; 0x9a
 8002820:	4874      	ldr	r0, [pc, #464]	; (80029f4 <HAL_DMA_Init+0x264>)
 8002822:	f7fe fe1c 	bl	800145e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d008      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800283e:	d003      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 8002840:	219b      	movs	r1, #155	; 0x9b
 8002842:	486c      	ldr	r0, [pc, #432]	; (80029f4 <HAL_DMA_Init+0x264>)
 8002844:	f7fe fe0b 	bl	800145e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d007      	beq.n	8002860 <HAL_DMA_Init+0xd0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_Init+0xd0>
 8002858:	219c      	movs	r1, #156	; 0x9c
 800285a:	4866      	ldr	r0, [pc, #408]	; (80029f4 <HAL_DMA_Init+0x264>)
 800285c:	f7fe fdff 	bl	800145e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d007      	beq.n	8002878 <HAL_DMA_Init+0xe8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_DMA_Init+0xe8>
 8002870:	219d      	movs	r1, #157	; 0x9d
 8002872:	4860      	ldr	r0, [pc, #384]	; (80029f4 <HAL_DMA_Init+0x264>)
 8002874:	f7fe fdf3 	bl	800145e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_DMA_Init+0x10c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002888:	d008      	beq.n	800289c <HAL_DMA_Init+0x10c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002892:	d003      	beq.n	800289c <HAL_DMA_Init+0x10c>
 8002894:	219e      	movs	r1, #158	; 0x9e
 8002896:	4857      	ldr	r0, [pc, #348]	; (80029f4 <HAL_DMA_Init+0x264>)
 8002898:	f7fe fde1 	bl	800145e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <HAL_DMA_Init+0x130>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d008      	beq.n	80028c0 <HAL_DMA_Init+0x130>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_Init+0x130>
 80028b8:	219f      	movs	r1, #159	; 0x9f
 80028ba:	484e      	ldr	r0, [pc, #312]	; (80029f4 <HAL_DMA_Init+0x264>)
 80028bc:	f7fe fdcf 	bl	800145e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_DMA_Init+0x148>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d003      	beq.n	80028d8 <HAL_DMA_Init+0x148>
 80028d0:	21a0      	movs	r1, #160	; 0xa0
 80028d2:	4848      	ldr	r0, [pc, #288]	; (80029f4 <HAL_DMA_Init+0x264>)
 80028d4:	f7fe fdc3 	bl	800145e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_DMA_Init+0x176>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d00d      	beq.n	8002906 <HAL_DMA_Init+0x176>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	d008      	beq.n	8002906 <HAL_DMA_Init+0x176>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028fc:	d003      	beq.n	8002906 <HAL_DMA_Init+0x176>
 80028fe:	21a1      	movs	r1, #161	; 0xa1
 8002900:	483c      	ldr	r0, [pc, #240]	; (80029f4 <HAL_DMA_Init+0x264>)
 8002902:	f7fe fdac 	bl	800145e <assert_failed>

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <HAL_DMA_Init+0x268>)
 800290e:	429a      	cmp	r2, r3
 8002910:	d80f      	bhi.n	8002932 <HAL_DMA_Init+0x1a2>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_DMA_Init+0x26c>)
 800291a:	4413      	add	r3, r2
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_DMA_Init+0x270>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a35      	ldr	r2, [pc, #212]	; (8002a04 <HAL_DMA_Init+0x274>)
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002930:	e00e      	b.n	8002950 <HAL_DMA_Init+0x1c0>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_DMA_Init+0x278>)
 800293a:	4413      	add	r3, r2
 800293c:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <HAL_DMA_Init+0x270>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <HAL_DMA_Init+0x27c>)
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002966:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800296a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40020008 	.word	0x40020008
 80029c8:	4002001c 	.word	0x4002001c
 80029cc:	40020030 	.word	0x40020030
 80029d0:	40020044 	.word	0x40020044
 80029d4:	40020058 	.word	0x40020058
 80029d8:	4002006c 	.word	0x4002006c
 80029dc:	40020080 	.word	0x40020080
 80029e0:	40020408 	.word	0x40020408
 80029e4:	4002041c 	.word	0x4002041c
 80029e8:	40020430 	.word	0x40020430
 80029ec:	40020444 	.word	0x40020444
 80029f0:	40020458 	.word	0x40020458
 80029f4:	080056c8 	.word	0x080056c8
 80029f8:	40020407 	.word	0x40020407
 80029fc:	bffdfff8 	.word	0xbffdfff8
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	40020000 	.word	0x40020000
 8002a08:	bffdfbf8 	.word	0xbffdfbf8
 8002a0c:	40020400 	.word	0x40020400

08002a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_Start_IT+0x20>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d304      	bcc.n	8002a3a <HAL_DMA_Start_IT+0x2a>
 8002a30:	f240 116f 	movw	r1, #367	; 0x16f
 8002a34:	482c      	ldr	r0, [pc, #176]	; (8002ae8 <HAL_DMA_Start_IT+0xd8>)
 8002a36:	f7fe fd12 	bl	800145e <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_DMA_Start_IT+0x38>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e04a      	b.n	8002ade <HAL_DMA_Start_IT+0xce>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d13a      	bne.n	8002ad0 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fa70 	bl	8002f64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 020e 	orr.w	r2, r2, #14
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e00f      	b.n	8002abe <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0204 	bic.w	r2, r2, #4
 8002aac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 020a 	orr.w	r2, r2, #10
 8002abc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e005      	b.n	8002adc <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	080056c8 	.word	0x080056c8

08002aec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2204      	movs	r2, #4
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80f1 	beq.w	8002cf8 <HAL_DMA_IRQHandler+0x20c>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80eb 	beq.w	8002cf8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d958      	bls.n	8002bfe <HAL_DMA_IRQHandler+0x112>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a5d      	ldr	r2, [pc, #372]	; (8002cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04f      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x10a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a5c      	ldr	r2, [pc, #368]	; (8002ccc <HAL_DMA_IRQHandler+0x1e0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d048      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x106>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5a      	ldr	r2, [pc, #360]	; (8002cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_IRQHandler+0x100>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a59      	ldr	r2, [pc, #356]	; (8002cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d038      	beq.n	8002be6 <HAL_DMA_IRQHandler+0xfa>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d030      	beq.n	8002be0 <HAL_DMA_IRQHandler+0xf4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a56      	ldr	r2, [pc, #344]	; (8002cdc <HAL_DMA_IRQHandler+0x1f0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d028      	beq.n	8002bda <HAL_DMA_IRQHandler+0xee>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d020      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xe8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d019      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xe4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	; (8002ce4 <HAL_DMA_IRQHandler+0x1f8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d012      	beq.n	8002bcc <HAL_DMA_IRQHandler+0xe0>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_DMA_IRQHandler+0x1fc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00a      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xda>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_DMA_IRQHandler+0x200>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d102      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0xd4>
 8002bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bbe:	e01b      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bc4:	e018      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bca:	e015      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bcc:	2340      	movs	r3, #64	; 0x40
 8002bce:	e013      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e011      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bd8:	e00e      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bde:	e00b      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002be0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002be4:	e008      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002be6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bea:	e005      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf0:	e002      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x10c>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <HAL_DMA_IRQHandler+0x204>)
 8002bfa:	6053      	str	r3, [r2, #4]
 8002bfc:	e057      	b.n	8002cae <HAL_DMA_IRQHandler+0x1c2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04f      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x1bc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <HAL_DMA_IRQHandler+0x1e0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d048      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x1b8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x1b2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d038      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x1ac>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d030      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x1a6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_DMA_IRQHandler+0x1f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d028      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x1a0>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d020      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x19a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_DMA_IRQHandler+0x1f4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x196>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_DMA_IRQHandler+0x1f8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d012      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x192>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_DMA_IRQHandler+0x1fc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00a      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x18c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_DMA_IRQHandler+0x200>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <HAL_DMA_IRQHandler+0x186>
 8002c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c70:	e01b      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c76:	e018      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7c:	e015      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c7e:	2340      	movs	r3, #64	; 0x40
 8002c80:	e013      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e011      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c8a:	e00e      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c90:	e00b      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c96:	e008      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c9c:	e005      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca2:	e002      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002ca4:	2340      	movs	r3, #64	; 0x40
 8002ca6:	e000      	b.n	8002caa <HAL_DMA_IRQHandler+0x1be>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_DMA_IRQHandler+0x208>)
 8002cac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8136 	beq.w	8002f24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc0:	e130      	b.n	8002f24 <HAL_DMA_IRQHandler+0x438>
 8002cc2:	bf00      	nop
 8002cc4:	40020080 	.word	0x40020080
 8002cc8:	40020008 	.word	0x40020008
 8002ccc:	4002001c 	.word	0x4002001c
 8002cd0:	40020030 	.word	0x40020030
 8002cd4:	40020044 	.word	0x40020044
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	4002006c 	.word	0x4002006c
 8002ce0:	40020408 	.word	0x40020408
 8002ce4:	4002041c 	.word	0x4002041c
 8002ce8:	40020430 	.word	0x40020430
 8002cec:	40020444 	.word	0x40020444
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80dd 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0x3d8>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80d7 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 020a 	bic.w	r2, r2, #10
 8002d32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b7b      	ldr	r3, [pc, #492]	; (8002f30 <HAL_DMA_IRQHandler+0x444>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d958      	bls.n	8002dfa <HAL_DMA_IRQHandler+0x30e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <HAL_DMA_IRQHandler+0x448>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d04f      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x306>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a78      	ldr	r2, [pc, #480]	; (8002f38 <HAL_DMA_IRQHandler+0x44c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d048      	beq.n	8002dee <HAL_DMA_IRQHandler+0x302>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a76      	ldr	r2, [pc, #472]	; (8002f3c <HAL_DMA_IRQHandler+0x450>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d040      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x2fc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a75      	ldr	r2, [pc, #468]	; (8002f40 <HAL_DMA_IRQHandler+0x454>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d038      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x2f6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a73      	ldr	r2, [pc, #460]	; (8002f44 <HAL_DMA_IRQHandler+0x458>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d030      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x2f0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <HAL_DMA_IRQHandler+0x45c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d028      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ea>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_DMA_IRQHandler+0x444>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d020      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x2e4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6e      	ldr	r2, [pc, #440]	; (8002f4c <HAL_DMA_IRQHandler+0x460>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d019      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x2e0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_DMA_IRQHandler+0x464>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d012      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2dc>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6b      	ldr	r2, [pc, #428]	; (8002f54 <HAL_DMA_IRQHandler+0x468>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00a      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x2d6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a69      	ldr	r2, [pc, #420]	; (8002f58 <HAL_DMA_IRQHandler+0x46c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d102      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x2d0>
 8002db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dba:	e01b      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc0:	e018      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc6:	e015      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e013      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e011      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd4:	e00e      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dda:	e00b      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de0:	e008      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de6:	e005      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dec:	e002      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002dee:	2320      	movs	r3, #32
 8002df0:	e000      	b.n	8002df4 <HAL_DMA_IRQHandler+0x308>
 8002df2:	2302      	movs	r3, #2
 8002df4:	4a59      	ldr	r2, [pc, #356]	; (8002f5c <HAL_DMA_IRQHandler+0x470>)
 8002df6:	6053      	str	r3, [r2, #4]
 8002df8:	e057      	b.n	8002eaa <HAL_DMA_IRQHandler+0x3be>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a4d      	ldr	r2, [pc, #308]	; (8002f34 <HAL_DMA_IRQHandler+0x448>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04f      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x3b8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_DMA_IRQHandler+0x44c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d048      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x3b4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4a      	ldr	r2, [pc, #296]	; (8002f3c <HAL_DMA_IRQHandler+0x450>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x3ae>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a48      	ldr	r2, [pc, #288]	; (8002f40 <HAL_DMA_IRQHandler+0x454>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d038      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x3a8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a47      	ldr	r2, [pc, #284]	; (8002f44 <HAL_DMA_IRQHandler+0x458>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d030      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x3a2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a45      	ldr	r2, [pc, #276]	; (8002f48 <HAL_DMA_IRQHandler+0x45c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d028      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x39c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <HAL_DMA_IRQHandler+0x444>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d020      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x396>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a41      	ldr	r2, [pc, #260]	; (8002f4c <HAL_DMA_IRQHandler+0x460>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x392>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a40      	ldr	r2, [pc, #256]	; (8002f50 <HAL_DMA_IRQHandler+0x464>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d012      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x38e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3e      	ldr	r2, [pc, #248]	; (8002f54 <HAL_DMA_IRQHandler+0x468>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x388>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <HAL_DMA_IRQHandler+0x46c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x382>
 8002e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e6c:	e01b      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e72:	e018      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e78:	e015      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e013      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e011      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	e00e      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e8c:	e00b      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	e008      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e98:	e005      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e9e:	e002      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x3ba>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <HAL_DMA_IRQHandler+0x474>)
 8002ea8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d034      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ec2:	e02f      	b.n	8002f24 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2208      	movs	r2, #8
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d028      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x43a>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d023      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 020e 	bic.w	r2, r2, #14
 8002eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    }
  }
  return;
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
}
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40020080 	.word	0x40020080
 8002f34:	40020008 	.word	0x40020008
 8002f38:	4002001c 	.word	0x4002001c
 8002f3c:	40020030 	.word	0x40020030
 8002f40:	40020044 	.word	0x40020044
 8002f44:	40020058 	.word	0x40020058
 8002f48:	4002006c 	.word	0x4002006c
 8002f4c:	40020408 	.word	0x40020408
 8002f50:	4002041c 	.word	0x4002041c
 8002f54:	40020430 	.word	0x40020430
 8002f58:	40020444 	.word	0x40020444
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020000 	.word	0x40020000

08002f64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d108      	bne.n	8002fa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fa2:	e007      	b.n	8002fb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a94      	ldr	r2, [pc, #592]	; (8003228 <HAL_GPIO_Init+0x268>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01b      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a93      	ldr	r2, [pc, #588]	; (800322c <HAL_GPIO_Init+0x26c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d017      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a92      	ldr	r2, [pc, #584]	; (8003230 <HAL_GPIO_Init+0x270>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a91      	ldr	r2, [pc, #580]	; (8003234 <HAL_GPIO_Init+0x274>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00f      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a90      	ldr	r2, [pc, #576]	; (8003238 <HAL_GPIO_Init+0x278>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a8f      	ldr	r2, [pc, #572]	; (800323c <HAL_GPIO_Init+0x27c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a8e      	ldr	r2, [pc, #568]	; (8003240 <HAL_GPIO_Init+0x280>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x52>
 800300a:	21bd      	movs	r1, #189	; 0xbd
 800300c:	488d      	ldr	r0, [pc, #564]	; (8003244 <HAL_GPIO_Init+0x284>)
 800300e:	f7fe fa26 	bl	800145e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_GPIO_Init+0x68>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x70>
 8003028:	21be      	movs	r1, #190	; 0xbe
 800302a:	4886      	ldr	r0, [pc, #536]	; (8003244 <HAL_GPIO_Init+0x284>)
 800302c:	f7fe fa17 	bl	800145e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8235 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f000 8230 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b11      	cmp	r3, #17
 800304a:	f000 822b 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	f000 8226 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b12      	cmp	r3, #18
 800305e:	f000 8221 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a78      	ldr	r2, [pc, #480]	; (8003248 <HAL_GPIO_Init+0x288>)
 8003068:	4293      	cmp	r3, r2
 800306a:	f000 821b 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a76      	ldr	r2, [pc, #472]	; (800324c <HAL_GPIO_Init+0x28c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	f000 8215 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a74      	ldr	r2, [pc, #464]	; (8003250 <HAL_GPIO_Init+0x290>)
 8003080:	4293      	cmp	r3, r2
 8003082:	f000 820f 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a72      	ldr	r2, [pc, #456]	; (8003254 <HAL_GPIO_Init+0x294>)
 800308c:	4293      	cmp	r3, r2
 800308e:	f000 8209 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a70      	ldr	r2, [pc, #448]	; (8003258 <HAL_GPIO_Init+0x298>)
 8003098:	4293      	cmp	r3, r2
 800309a:	f000 8203 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_GPIO_Init+0x29c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f000 81fd 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	f000 81f8 	beq.w	80034a4 <HAL_GPIO_Init+0x4e4>
 80030b4:	21bf      	movs	r1, #191	; 0xbf
 80030b6:	4863      	ldr	r0, [pc, #396]	; (8003244 <HAL_GPIO_Init+0x284>)
 80030b8:	f7fe f9d1 	bl	800145e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030bc:	e1f2      	b.n	80034a4 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030be:	2201      	movs	r2, #1
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	f040 81e1 	bne.w	800349e <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_GPIO_Init+0x268>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d01b      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_GPIO_Init+0x26c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a50      	ldr	r2, [pc, #320]	; (8003230 <HAL_GPIO_Init+0x270>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a4f      	ldr	r2, [pc, #316]	; (8003234 <HAL_GPIO_Init+0x274>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00f      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a4e      	ldr	r2, [pc, #312]	; (8003238 <HAL_GPIO_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a4d      	ldr	r2, [pc, #308]	; (800323c <HAL_GPIO_Init+0x27c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a4c      	ldr	r2, [pc, #304]	; (8003240 <HAL_GPIO_Init+0x280>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x15c>
 8003114:	21cd      	movs	r1, #205	; 0xcd
 8003116:	484b      	ldr	r0, [pc, #300]	; (8003244 <HAL_GPIO_Init+0x284>)
 8003118:	f7fe f9a1 	bl	800145e <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a4e      	ldr	r2, [pc, #312]	; (800325c <HAL_GPIO_Init+0x29c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f000 80c6 	beq.w	80032b4 <HAL_GPIO_Init+0x2f4>
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x29c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	f200 80ec 	bhi.w	8003308 <HAL_GPIO_Init+0x348>
 8003130:	4a47      	ldr	r2, [pc, #284]	; (8003250 <HAL_GPIO_Init+0x290>)
 8003132:	4293      	cmp	r3, r2
 8003134:	f000 80be 	beq.w	80032b4 <HAL_GPIO_Init+0x2f4>
 8003138:	4a45      	ldr	r2, [pc, #276]	; (8003250 <HAL_GPIO_Init+0x290>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f200 80e4 	bhi.w	8003308 <HAL_GPIO_Init+0x348>
 8003140:	4a45      	ldr	r2, [pc, #276]	; (8003258 <HAL_GPIO_Init+0x298>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f000 80b6 	beq.w	80032b4 <HAL_GPIO_Init+0x2f4>
 8003148:	4a43      	ldr	r2, [pc, #268]	; (8003258 <HAL_GPIO_Init+0x298>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f200 80dc 	bhi.w	8003308 <HAL_GPIO_Init+0x348>
 8003150:	4a3e      	ldr	r2, [pc, #248]	; (800324c <HAL_GPIO_Init+0x28c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	f000 80ae 	beq.w	80032b4 <HAL_GPIO_Init+0x2f4>
 8003158:	4a3c      	ldr	r2, [pc, #240]	; (800324c <HAL_GPIO_Init+0x28c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	f200 80d4 	bhi.w	8003308 <HAL_GPIO_Init+0x348>
 8003160:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <HAL_GPIO_Init+0x294>)
 8003162:	4293      	cmp	r3, r2
 8003164:	f000 80a6 	beq.w	80032b4 <HAL_GPIO_Init+0x2f4>
 8003168:	4a3a      	ldr	r2, [pc, #232]	; (8003254 <HAL_GPIO_Init+0x294>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f200 80cc 	bhi.w	8003308 <HAL_GPIO_Init+0x348>
 8003170:	2b12      	cmp	r3, #18
 8003172:	d82b      	bhi.n	80031cc <HAL_GPIO_Init+0x20c>
 8003174:	2b12      	cmp	r3, #18
 8003176:	f200 80c7 	bhi.w	8003308 <HAL_GPIO_Init+0x348>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <HAL_GPIO_Init+0x1c0>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080032b5 	.word	0x080032b5
 8003184:	080031d5 	.word	0x080031d5
 8003188:	08003261 	.word	0x08003261
 800318c:	08003303 	.word	0x08003303
 8003190:	08003309 	.word	0x08003309
 8003194:	08003309 	.word	0x08003309
 8003198:	08003309 	.word	0x08003309
 800319c:	08003309 	.word	0x08003309
 80031a0:	08003309 	.word	0x08003309
 80031a4:	08003309 	.word	0x08003309
 80031a8:	08003309 	.word	0x08003309
 80031ac:	08003309 	.word	0x08003309
 80031b0:	08003309 	.word	0x08003309
 80031b4:	08003309 	.word	0x08003309
 80031b8:	08003309 	.word	0x08003309
 80031bc:	08003309 	.word	0x08003309
 80031c0:	08003309 	.word	0x08003309
 80031c4:	080031fd 	.word	0x080031fd
 80031c8:	0800328b 	.word	0x0800328b
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_GPIO_Init+0x288>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d070      	beq.n	80032b4 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031d2:	e099      	b.n	8003308 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d00b      	beq.n	80031f4 <HAL_GPIO_Init+0x234>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d007      	beq.n	80031f4 <HAL_GPIO_Init+0x234>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x234>
 80031ec:	21d5      	movs	r1, #213	; 0xd5
 80031ee:	4815      	ldr	r0, [pc, #84]	; (8003244 <HAL_GPIO_Init+0x284>)
 80031f0:	f7fe f935 	bl	800145e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	623b      	str	r3, [r7, #32]
          break;
 80031fa:	e086      	b.n	800330a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d00b      	beq.n	800321c <HAL_GPIO_Init+0x25c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d007      	beq.n	800321c <HAL_GPIO_Init+0x25c>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x25c>
 8003214:	21dc      	movs	r1, #220	; 0xdc
 8003216:	480b      	ldr	r0, [pc, #44]	; (8003244 <HAL_GPIO_Init+0x284>)
 8003218:	f7fe f921 	bl	800145e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	3304      	adds	r3, #4
 8003222:	623b      	str	r3, [r7, #32]
          break;
 8003224:	e071      	b.n	800330a <HAL_GPIO_Init+0x34a>
 8003226:	bf00      	nop
 8003228:	40010800 	.word	0x40010800
 800322c:	40010c00 	.word	0x40010c00
 8003230:	40011000 	.word	0x40011000
 8003234:	40011400 	.word	0x40011400
 8003238:	40011800 	.word	0x40011800
 800323c:	40011c00 	.word	0x40011c00
 8003240:	40012000 	.word	0x40012000
 8003244:	08005700 	.word	0x08005700
 8003248:	10110000 	.word	0x10110000
 800324c:	10210000 	.word	0x10210000
 8003250:	10310000 	.word	0x10310000
 8003254:	10120000 	.word	0x10120000
 8003258:	10220000 	.word	0x10220000
 800325c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d00b      	beq.n	8003280 <HAL_GPIO_Init+0x2c0>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_Init+0x2c0>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x2c0>
 8003278:	21e3      	movs	r1, #227	; 0xe3
 800327a:	4891      	ldr	r0, [pc, #580]	; (80034c0 <HAL_GPIO_Init+0x500>)
 800327c:	f7fe f8ef 	bl	800145e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	3308      	adds	r3, #8
 8003286:	623b      	str	r3, [r7, #32]
          break;
 8003288:	e03f      	b.n	800330a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d00b      	beq.n	80032aa <HAL_GPIO_Init+0x2ea>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x2ea>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x2ea>
 80032a2:	21ea      	movs	r1, #234	; 0xea
 80032a4:	4886      	ldr	r0, [pc, #536]	; (80034c0 <HAL_GPIO_Init+0x500>)
 80032a6:	f7fe f8da 	bl	800145e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	330c      	adds	r3, #12
 80032b0:	623b      	str	r3, [r7, #32]
          break;
 80032b2:	e02a      	b.n	800330a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_GPIO_Init+0x314>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x314>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x314>
 80032cc:	21f7      	movs	r1, #247	; 0xf7
 80032ce:	487c      	ldr	r0, [pc, #496]	; (80034c0 <HAL_GPIO_Init+0x500>)
 80032d0:	f7fe f8c5 	bl	800145e <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032dc:	2304      	movs	r3, #4
 80032de:	623b      	str	r3, [r7, #32]
          break;
 80032e0:	e013      	b.n	800330a <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d105      	bne.n	80032f6 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ea:	2308      	movs	r3, #8
 80032ec:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	611a      	str	r2, [r3, #16]
          break;
 80032f4:	e009      	b.n	800330a <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f6:	2308      	movs	r3, #8
 80032f8:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	615a      	str	r2, [r3, #20]
          break;
 8003300:	e003      	b.n	800330a <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e000      	b.n	800330a <HAL_GPIO_Init+0x34a>
          break;
 8003308:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2bff      	cmp	r3, #255	; 0xff
 800330e:	d801      	bhi.n	8003314 <HAL_GPIO_Init+0x354>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	e001      	b.n	8003318 <HAL_GPIO_Init+0x358>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2bff      	cmp	r3, #255	; 0xff
 800331e:	d802      	bhi.n	8003326 <HAL_GPIO_Init+0x366>
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x36c>
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	3b08      	subs	r3, #8
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	210f      	movs	r1, #15
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	6a39      	ldr	r1, [r7, #32]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	431a      	orrs	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a2 	beq.w	800349e <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800335a:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <HAL_GPIO_Init+0x504>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4a59      	ldr	r2, [pc, #356]	; (80034c4 <HAL_GPIO_Init+0x504>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6193      	str	r3, [r2, #24]
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_GPIO_Init+0x504>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_GPIO_Init+0x508>)
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	220f      	movs	r2, #15
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_GPIO_Init+0x50c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_Init+0x41e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4b      	ldr	r2, [pc, #300]	; (80034d0 <HAL_GPIO_Init+0x510>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_Init+0x41a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4a      	ldr	r2, [pc, #296]	; (80034d4 <HAL_GPIO_Init+0x514>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x416>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a49      	ldr	r2, [pc, #292]	; (80034d8 <HAL_GPIO_Init+0x518>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x412>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a48      	ldr	r2, [pc, #288]	; (80034dc <HAL_GPIO_Init+0x51c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x40e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <HAL_GPIO_Init+0x520>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x40a>
 80033c6:	2305      	movs	r3, #5
 80033c8:	e00a      	b.n	80033e0 <HAL_GPIO_Init+0x420>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e008      	b.n	80033e0 <HAL_GPIO_Init+0x420>
 80033ce:	2304      	movs	r3, #4
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x420>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e004      	b.n	80033e0 <HAL_GPIO_Init+0x420>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_Init+0x420>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x420>
 80033de:	2300      	movs	r3, #0
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	f002 0203 	and.w	r2, r2, #3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	4093      	lsls	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033f0:	4935      	ldr	r1, [pc, #212]	; (80034c8 <HAL_GPIO_Init+0x508>)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d006      	beq.n	8003418 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_GPIO_Init+0x524>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4935      	ldr	r1, [pc, #212]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
 8003416:	e006      	b.n	8003426 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_GPIO_Init+0x524>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	43db      	mvns	r3, r3
 8003420:	4930      	ldr	r1, [pc, #192]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003422:	4013      	ands	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	492b      	ldr	r1, [pc, #172]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
 800343e:	e006      	b.n	800344e <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	43db      	mvns	r3, r3
 8003448:	4926      	ldr	r1, [pc, #152]	; (80034e4 <HAL_GPIO_Init+0x524>)
 800344a:	4013      	ands	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d006      	beq.n	8003468 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_GPIO_Init+0x524>)
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	4921      	ldr	r1, [pc, #132]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
 8003466:	e006      	b.n	8003476 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_GPIO_Init+0x524>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	43db      	mvns	r3, r3
 8003470:	491c      	ldr	r1, [pc, #112]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003472:	4013      	ands	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	4917      	ldr	r1, [pc, #92]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	60cb      	str	r3, [r1, #12]
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_GPIO_Init+0x524>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	43db      	mvns	r3, r3
 8003498:	4912      	ldr	r1, [pc, #72]	; (80034e4 <HAL_GPIO_Init+0x524>)
 800349a:	4013      	ands	r3, r2
 800349c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f47f ae05 	bne.w	80030be <HAL_GPIO_Init+0xfe>
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3728      	adds	r7, #40	; 0x28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	08005700 	.word	0x08005700
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40010800 	.word	0x40010800
 80034d0:	40010c00 	.word	0x40010c00
 80034d4:	40011000 	.word	0x40011000
 80034d8:	40011400 	.word	0x40011400
 80034dc:	40011800 	.word	0x40011800
 80034e0:	40011c00 	.word	0x40011c00
 80034e4:	40010400 	.word	0x40010400

080034e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
 80034f4:	4613      	mov	r3, r2
 80034f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_GPIO_WritePin+0x20>
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <HAL_GPIO_WritePin+0x2a>
 8003508:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800350c:	480e      	ldr	r0, [pc, #56]	; (8003548 <HAL_GPIO_WritePin+0x60>)
 800350e:	f7fd ffa6 	bl	800145e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003512:	787b      	ldrb	r3, [r7, #1]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_WritePin+0x40>
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d004      	beq.n	8003528 <HAL_GPIO_WritePin+0x40>
 800351e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003522:	4809      	ldr	r0, [pc, #36]	; (8003548 <HAL_GPIO_WritePin+0x60>)
 8003524:	f7fd ff9b 	bl	800145e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003534:	e003      	b.n	800353e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	041a      	lsls	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	08005700 	.word	0x08005700

0800354c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e35a      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x54>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d116      	bne.n	80035a0 <HAL_RCC_OscConfig+0x54>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d110      	bne.n	80035a0 <HAL_RCC_OscConfig+0x54>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x54>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_RCC_OscConfig+0x54>
 8003596:	f240 1167 	movw	r1, #359	; 0x167
 800359a:	488f      	ldr	r0, [pc, #572]	; (80037d8 <HAL_RCC_OscConfig+0x28c>)
 800359c:	f7fd ff5f 	bl	800145e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 809a 	beq.w	80036e2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <HAL_RCC_OscConfig+0x88>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d009      	beq.n	80035d4 <HAL_RCC_OscConfig+0x88>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d004      	beq.n	80035d4 <HAL_RCC_OscConfig+0x88>
 80035ca:	f240 116d 	movw	r1, #365	; 0x16d
 80035ce:	4882      	ldr	r0, [pc, #520]	; (80037d8 <HAL_RCC_OscConfig+0x28c>)
 80035d0:	f7fd ff45 	bl	800145e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d4:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d00c      	beq.n	80035fa <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035e0:	4b7e      	ldr	r3, [pc, #504]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d112      	bne.n	8003612 <HAL_RCC_OscConfig+0xc6>
 80035ec:	4b7b      	ldr	r3, [pc, #492]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f8:	d10b      	bne.n	8003612 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fa:	4b78      	ldr	r3, [pc, #480]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d06c      	beq.n	80036e0 <HAL_RCC_OscConfig+0x194>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d168      	bne.n	80036e0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e300      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0xde>
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e02e      	b.n	8003688 <HAL_RCC_OscConfig+0x13c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x100>
 8003632:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a69      	ldr	r2, [pc, #420]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a66      	ldr	r2, [pc, #408]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0x13c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x124>
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a60      	ldr	r2, [pc, #384]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5d      	ldr	r2, [pc, #372]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x13c>
 8003670:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a59      	ldr	r2, [pc, #356]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a56      	ldr	r2, [pc, #344]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe f8ce 	bl	8001830 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe f8ca 	bl	8001830 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e2b4      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x14c>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f8ba 	bl	8001830 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fe f8b6 	bl	8001830 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e2a0      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	4b42      	ldr	r3, [pc, #264]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x174>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8080 	beq.w	80037f0 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_OscConfig+0x1be>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d004      	beq.n	800370a <HAL_RCC_OscConfig+0x1be>
 8003700:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003704:	4834      	ldr	r0, [pc, #208]	; (80037d8 <HAL_RCC_OscConfig+0x28c>)
 8003706:	f7fd feaa 	bl	800145e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b1f      	cmp	r3, #31
 8003710:	d904      	bls.n	800371c <HAL_RCC_OscConfig+0x1d0>
 8003712:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003716:	4830      	ldr	r0, [pc, #192]	; (80037d8 <HAL_RCC_OscConfig+0x28c>)
 8003718:	f7fd fea1 	bl	800145e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003728:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d11c      	bne.n	800376e <HAL_RCC_OscConfig+0x222>
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_OscConfig+0x20c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e25d      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	491d      	ldr	r1, [pc, #116]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376c:	e040      	b.n	80037f0 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d020      	beq.n	80037b8 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCC_OscConfig+0x294>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe f858 	bl	8001830 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003784:	f7fe f854 	bl	8001830 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e23e      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490a      	ldr	r1, [pc, #40]	; (80037dc <HAL_RCC_OscConfig+0x290>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
 80037b6:	e01b      	b.n	80037f0 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x294>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe f837 	bl	8001830 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c4:	e00e      	b.n	80037e4 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c6:	f7fe f833 	bl	8001830 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d907      	bls.n	80037e4 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e21d      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
 80037d8:	0800573c 	.word	0x0800573c
 80037dc:	40021000 	.word	0x40021000
 80037e0:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e4:	4b7d      	ldr	r3, [pc, #500]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ea      	bne.n	80037c6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d040      	beq.n	800387e <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_OscConfig+0x2ca>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d004      	beq.n	8003816 <HAL_RCC_OscConfig+0x2ca>
 800380c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003810:	4873      	ldr	r0, [pc, #460]	; (80039e0 <HAL_RCC_OscConfig+0x494>)
 8003812:	f7fd fe24 	bl	800145e <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b71      	ldr	r3, [pc, #452]	; (80039e4 <HAL_RCC_OscConfig+0x498>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fe f804 	bl	8001830 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7fe f800 	bl	8001830 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1ea      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800384a:	2001      	movs	r0, #1
 800384c:	f000 fbda 	bl	8004004 <RCC_Delay>
 8003850:	e015      	b.n	800387e <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003852:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <HAL_RCC_OscConfig+0x498>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fd ffea 	bl	8001830 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003860:	f7fd ffe6 	bl	8001830 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1d0      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003872:	4b5a      	ldr	r3, [pc, #360]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80bf 	beq.w	8003a0a <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388c:	2300      	movs	r3, #0
 800388e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_RCC_OscConfig+0x366>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_OscConfig+0x366>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d004      	beq.n	80038b2 <HAL_RCC_OscConfig+0x366>
 80038a8:	f240 2111 	movw	r1, #529	; 0x211
 80038ac:	484c      	ldr	r0, [pc, #304]	; (80039e0 <HAL_RCC_OscConfig+0x494>)
 80038ae:	f7fd fdd6 	bl	800145e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4a46      	ldr	r2, [pc, #280]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	61d3      	str	r3, [r2, #28]
 80038ca:	4b44      	ldr	r3, [pc, #272]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x49c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_RCC_OscConfig+0x49c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <HAL_RCC_OscConfig+0x49c>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fd ff9d 	bl	8001830 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fd ff99 	bl	8001830 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e183      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_OscConfig+0x49c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x3e2>
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	e02d      	b.n	800398a <HAL_RCC_OscConfig+0x43e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x404>
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6213      	str	r3, [r2, #32]
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	6213      	str	r3, [r2, #32]
 800394e:	e01c      	b.n	800398a <HAL_RCC_OscConfig+0x43e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d10c      	bne.n	8003972 <HAL_RCC_OscConfig+0x426>
 8003958:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6213      	str	r3, [r2, #32]
 8003970:	e00b      	b.n	800398a <HAL_RCC_OscConfig+0x43e>
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6213      	str	r3, [r2, #32]
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d015      	beq.n	80039be <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fd ff4d 	bl	8001830 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fd ff49 	bl	8001830 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e131      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_RCC_OscConfig+0x490>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ee      	beq.n	800399a <HAL_RCC_OscConfig+0x44e>
 80039bc:	e01c      	b.n	80039f8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fd ff37 	bl	8001830 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c4:	e012      	b.n	80039ec <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fd ff33 	bl	8001830 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d909      	bls.n	80039ec <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e11b      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
 80039dc:	40021000 	.word	0x40021000
 80039e0:	0800573c 	.word	0x0800573c
 80039e4:	42420480 	.word	0x42420480
 80039e8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	4b8b      	ldr	r3, [pc, #556]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b87      	ldr	r3, [pc, #540]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a86      	ldr	r2, [pc, #536]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4e0>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d008      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4e0>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d004      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4e0>
 8003a22:	f240 21af 	movw	r1, #687	; 0x2af
 8003a26:	487e      	ldr	r0, [pc, #504]	; (8003c20 <HAL_RCC_OscConfig+0x6d4>)
 8003a28:	f7fd fd19 	bl	800145e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80ee 	beq.w	8003c12 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a36:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	f000 80ce 	beq.w	8003be0 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	f040 80b2 	bne.w	8003bb2 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_OscConfig+0x51e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d004      	beq.n	8003a6a <HAL_RCC_OscConfig+0x51e>
 8003a60:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003a64:	486e      	ldr	r0, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x6d4>)
 8003a66:	f7fd fcfa 	bl	800145e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d04a      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a7a:	d045      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a84:	d040      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a8e:	d03b      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a98:	d036      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003aa2:	d031      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003aac:	d02c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ab6:	d027      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac0:	d022      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003aca:	d01d      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ad4:	d018      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae8:	d00e      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003af2:	d009      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003afc:	d004      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5bc>
 8003afe:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003b02:	4847      	ldr	r0, [pc, #284]	; (8003c20 <HAL_RCC_OscConfig+0x6d4>)
 8003b04:	f7fd fcab 	bl	800145e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCC_OscConfig+0x6d8>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fe8f 	bl	8001830 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fd fe8b 	bl	8001830 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e075      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b28:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d116      	bne.n	8003b6c <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_OscConfig+0x60e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b4e:	d004      	beq.n	8003b5a <HAL_RCC_OscConfig+0x60e>
 8003b50:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003b54:	4832      	ldr	r0, [pc, #200]	; (8003c20 <HAL_RCC_OscConfig+0x6d4>)
 8003b56:	f7fd fc82 	bl	800145e <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	492d      	ldr	r1, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a19      	ldr	r1, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	4927      	ldr	r1, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCC_OscConfig+0x6d8>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fe51 	bl	8001830 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd fe4d 	bl	8001830 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e037      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x646>
 8003bb0:	e02f      	b.n	8003c12 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_RCC_OscConfig+0x6d8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fe3a 	bl	8001830 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fd fe36 	bl	8001830 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e020      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x674>
 8003bde:	e018      	b.n	8003c12 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e013      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_OscConfig+0x6d0>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	0800573c 	.word	0x0800573c
 8003c24:	42420060 	.word	0x42420060

08003c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e176      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x4e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d110      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x4e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x4e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x4e>
 8003c6c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003c70:	4874      	ldr	r0, [pc, #464]	; (8003e44 <HAL_RCC_ClockConfig+0x21c>)
 8003c72:	f7fd fbf4 	bl	800145e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x6a>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d007      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x6a>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d004      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x6a>
 8003c88:	f240 3139 	movw	r1, #825	; 0x339
 8003c8c:	486d      	ldr	r0, [pc, #436]	; (8003e44 <HAL_RCC_ClockConfig+0x21c>)
 8003c8e:	f7fd fbe6 	bl	800145e <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c92:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d910      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca0:	4b69      	ldr	r3, [pc, #420]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	4967      	ldr	r1, [pc, #412]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e133      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d049      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cda:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a5b      	ldr	r2, [pc, #364]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003ce0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ce4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a55      	ldr	r2, [pc, #340]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003cf8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cfc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d024      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d020      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b90      	cmp	r3, #144	; 0x90
 8003d14:	d01c      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d1c:	d018      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2bb0      	cmp	r3, #176	; 0xb0
 8003d24:	d014      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2bd0      	cmp	r3, #208	; 0xd0
 8003d34:	d00c      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2be0      	cmp	r3, #224	; 0xe0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2bf0      	cmp	r3, #240	; 0xf0
 8003d44:	d004      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x128>
 8003d46:	f240 315f 	movw	r1, #863	; 0x35f
 8003d4a:	483e      	ldr	r0, [pc, #248]	; (8003e44 <HAL_RCC_ClockConfig+0x21c>)
 8003d4c:	f7fd fb87 	bl	800145e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b3e      	ldr	r3, [pc, #248]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	493b      	ldr	r1, [pc, #236]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d051      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x168>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x168>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d004      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x168>
 8003d86:	f240 3166 	movw	r1, #870	; 0x366
 8003d8a:	482e      	ldr	r0, [pc, #184]	; (8003e44 <HAL_RCC_ClockConfig+0x21c>)
 8003d8c:	f7fd fb67 	bl	800145e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d98:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d115      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0c0      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b4      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0ac      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 0203 	bic.w	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	491b      	ldr	r1, [pc, #108]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de2:	f7fd fd25 	bl	8001830 <HAL_GetTick>
 8003de6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dea:	f7fd fd21 	bl	8001830 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e094      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x224>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 020c 	and.w	r2, r3, #12
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d1eb      	bne.n	8003dea <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d217      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 0207 	bic.w	r2, r3, #7
 8003e28:	4907      	ldr	r1, [pc, #28]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_ClockConfig+0x220>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e073      	b.n	8003f2a <HAL_RCC_ClockConfig+0x302>
 8003e42:	bf00      	nop
 8003e44:	0800573c 	.word	0x0800573c
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d025      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d018      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x26e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6c:	d013      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x26e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e76:	d00e      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x26e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x26e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e8a:	d004      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x26e>
 8003e8c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003e90:	4828      	ldr	r0, [pc, #160]	; (8003f34 <HAL_RCC_ClockConfig+0x30c>)
 8003e92:	f7fd fae4 	bl	800145e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e96:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_RCC_ClockConfig+0x310>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4925      	ldr	r1, [pc, #148]	; (8003f38 <HAL_RCC_ClockConfig+0x310>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d026      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d018      	beq.n	8003eee <HAL_RCC_ClockConfig+0x2c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d013      	beq.n	8003eee <HAL_RCC_ClockConfig+0x2c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ece:	d00e      	beq.n	8003eee <HAL_RCC_ClockConfig+0x2c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x2c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ee2:	d004      	beq.n	8003eee <HAL_RCC_ClockConfig+0x2c6>
 8003ee4:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003ee8:	4812      	ldr	r0, [pc, #72]	; (8003f34 <HAL_RCC_ClockConfig+0x30c>)
 8003eea:	f7fd fab8 	bl	800145e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_RCC_ClockConfig+0x310>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	490e      	ldr	r1, [pc, #56]	; (8003f38 <HAL_RCC_ClockConfig+0x310>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f02:	f000 f821 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_ClockConfig+0x310>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	490a      	ldr	r1, [pc, #40]	; (8003f3c <HAL_RCC_ClockConfig+0x314>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x318>)
 8003f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x31c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fc42 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	0800573c 	.word	0x0800573c
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08005834 	.word	0x08005834
 8003f40:	20000004 	.word	0x20000004
 8003f44:	20000008 	.word	0x20000008

08003f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f48:	b490      	push	{r4, r7}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f50:	1d3c      	adds	r4, r7, #4
 8003f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f58:	f240 2301 	movw	r3, #513	; 0x201
 8003f5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d002      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x40>
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d003      	beq.n	8003f8e <HAL_RCC_GetSysClockFreq+0x46>
 8003f86:	e02b      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f88:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f8a:	623b      	str	r3, [r7, #32]
      break;
 8003f8c:	e02b      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	0c9b      	lsrs	r3, r3, #18
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	443b      	add	r3, r7
 8003f9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d012      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0c5b      	lsrs	r3, r3, #17
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	3328      	adds	r3, #40	; 0x28
 8003fb6:	443b      	add	r3, r7
 8003fb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fc2:	fb03 f202 	mul.w	r2, r3, r2
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	e004      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	623b      	str	r3, [r7, #32]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fe2:	623b      	str	r3, [r7, #32]
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3728      	adds	r7, #40	; 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc90      	pop	{r4, r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	08005774 	.word	0x08005774
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	007a1200 	.word	0x007a1200
 8004000:	003d0900 	.word	0x003d0900

08004004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <RCC_Delay+0x34>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	; (800403c <RCC_Delay+0x38>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0a5b      	lsrs	r3, r3, #9
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004020:	bf00      	nop
  }
  while (Delay --);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1e5a      	subs	r2, r3, #1
 8004026:	60fa      	str	r2, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f9      	bne.n	8004020 <RCC_Delay+0x1c>
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	20000004 	.word	0x20000004
 800403c:	10624dd3 	.word	0x10624dd3

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8004068:	216c      	movs	r1, #108	; 0x6c
 800406a:	4865      	ldr	r0, [pc, #404]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800406c:	f7fd f9f7 	bl	800145e <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8095 	beq.w	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    FlagStatus pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d012      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d00d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a6:	d003      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80040a8:	2174      	movs	r1, #116	; 0x74
 80040aa:	4855      	ldr	r0, [pc, #340]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040ac:	f7fd f9d7 	bl	800145e <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b0:	4b54      	ldr	r3, [pc, #336]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b51      	ldr	r3, [pc, #324]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a50      	ldr	r2, [pc, #320]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
 80040c8:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d118      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a47      	ldr	r2, [pc, #284]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f0:	f7fd fb9e 	bl	8001830 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	e008      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f8:	f7fd fb9a 	bl	8001830 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e075      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02e      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	429a      	cmp	r2, r3
 8004132:	d027      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004134:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413e:	4b33      	ldr	r3, [pc, #204]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	4b31      	ldr	r3, [pc, #196]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800414a:	4a2e      	ldr	r2, [pc, #184]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d014      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x144>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fd fb69 	bl	8001830 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x138>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd fb65 	bl	8001830 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x138>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e03e      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x122>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004184:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	491c      	ldr	r1, [pc, #112]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c4:	d00d      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ce:	d008      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041d8:	d003      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80041da:	21b9      	movs	r1, #185	; 0xb9
 80041dc:	4808      	ldr	r0, [pc, #32]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041de:	f7fd f93e 	bl	800145e <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4905      	ldr	r1, [pc, #20]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	08005784 	.word	0x08005784
 8004204:	40021000 	.word	0x40021000
 8004208:	40007000 	.word	0x40007000
 800420c:	42420440 	.word	0x42420440

08004210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e09d      	b.n	800435e <HAL_TIM_Base_Init+0x14e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d01d      	beq.n	8004268 <HAL_TIM_Base_Init+0x58>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_TIM_Base_Init+0x158>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Init+0x58>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4c      	ldr	r2, [pc, #304]	; (800436c <HAL_TIM_Base_Init+0x15c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Init+0x58>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a4a      	ldr	r2, [pc, #296]	; (8004370 <HAL_TIM_Base_Init+0x160>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Init+0x58>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a49      	ldr	r2, [pc, #292]	; (8004374 <HAL_TIM_Base_Init+0x164>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Init+0x58>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a47      	ldr	r2, [pc, #284]	; (8004378 <HAL_TIM_Base_Init+0x168>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Init+0x58>
 800425e:	f240 1113 	movw	r1, #275	; 0x113
 8004262:	4846      	ldr	r0, [pc, #280]	; (800437c <HAL_TIM_Base_Init+0x16c>)
 8004264:	f7fd f8fb 	bl	800145e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d014      	beq.n	800429a <HAL_TIM_Base_Init+0x8a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b10      	cmp	r3, #16
 8004276:	d010      	beq.n	800429a <HAL_TIM_Base_Init+0x8a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b20      	cmp	r3, #32
 800427e:	d00c      	beq.n	800429a <HAL_TIM_Base_Init+0x8a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d008      	beq.n	800429a <HAL_TIM_Base_Init+0x8a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d004      	beq.n	800429a <HAL_TIM_Base_Init+0x8a>
 8004290:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004294:	4839      	ldr	r0, [pc, #228]	; (800437c <HAL_TIM_Base_Init+0x16c>)
 8004296:	f7fd f8e2 	bl	800145e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <HAL_TIM_Base_Init+0xb0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	d009      	beq.n	80042c0 <HAL_TIM_Base_Init+0xb0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b4:	d004      	beq.n	80042c0 <HAL_TIM_Base_Init+0xb0>
 80042b6:	f240 1115 	movw	r1, #277	; 0x115
 80042ba:	4830      	ldr	r0, [pc, #192]	; (800437c <HAL_TIM_Base_Init+0x16c>)
 80042bc:	f7fd f8cf 	bl	800145e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_TIM_Base_Init+0xca>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d004      	beq.n	80042da <HAL_TIM_Base_Init+0xca>
 80042d0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80042d4:	4829      	ldr	r0, [pc, #164]	; (800437c <HAL_TIM_Base_Init+0x16c>)
 80042d6:	f7fd f8c2 	bl	800145e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd f962 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fe7a 	bl	8005000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40001000 	.word	0x40001000
 8004378:	40001400 	.word	0x40001400
 800437c:	080057c0 	.word	0x080057c0

08004380 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d01d      	beq.n	80043ce <HAL_TIM_Base_Start+0x4e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2d      	ldr	r2, [pc, #180]	; (800444c <HAL_TIM_Base_Start+0xcc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_TIM_Base_Start+0x4e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <HAL_TIM_Base_Start+0xd0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_TIM_Base_Start+0x4e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <HAL_TIM_Base_Start+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_TIM_Base_Start+0x4e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a28      	ldr	r2, [pc, #160]	; (8004458 <HAL_TIM_Base_Start+0xd8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_TIM_Base_Start+0x4e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a27      	ldr	r2, [pc, #156]	; (800445c <HAL_TIM_Base_Start+0xdc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIM_Base_Start+0x4e>
 80043c4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80043c8:	4825      	ldr	r0, [pc, #148]	; (8004460 <HAL_TIM_Base_Start+0xe0>)
 80043ca:	f7fd f848 	bl	800145e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_TIM_Base_Start+0x5e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e032      	b.n	8004444 <HAL_TIM_Base_Start+0xc4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d00e      	beq.n	800440e <HAL_TIM_Base_Start+0x8e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_TIM_Base_Start+0xcc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIM_Base_Start+0x8e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_TIM_Base_Start+0xd0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIM_Base_Start+0x8e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a12      	ldr	r2, [pc, #72]	; (8004454 <HAL_TIM_Base_Start+0xd4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d111      	bne.n	8004432 <HAL_TIM_Base_Start+0xb2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b06      	cmp	r3, #6
 800441e:	d010      	beq.n	8004442 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	e007      	b.n	8004442 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40001000 	.word	0x40001000
 800445c:	40001400 	.word	0x40001400
 8004460:	080057c0 	.word	0x080057c0

08004464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e09d      	b.n	80045b2 <HAL_TIM_PWM_Init+0x14e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d01d      	beq.n	80044bc <HAL_TIM_PWM_Init+0x58>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a4d      	ldr	r2, [pc, #308]	; (80045bc <HAL_TIM_PWM_Init+0x158>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <HAL_TIM_PWM_Init+0x58>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4c      	ldr	r2, [pc, #304]	; (80045c0 <HAL_TIM_PWM_Init+0x15c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_TIM_PWM_Init+0x58>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4a      	ldr	r2, [pc, #296]	; (80045c4 <HAL_TIM_PWM_Init+0x160>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_TIM_PWM_Init+0x58>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a49      	ldr	r2, [pc, #292]	; (80045c8 <HAL_TIM_PWM_Init+0x164>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_TIM_PWM_Init+0x58>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a47      	ldr	r2, [pc, #284]	; (80045cc <HAL_TIM_PWM_Init+0x168>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_TIM_PWM_Init+0x58>
 80044b2:	f240 5113 	movw	r1, #1299	; 0x513
 80044b6:	4846      	ldr	r0, [pc, #280]	; (80045d0 <HAL_TIM_PWM_Init+0x16c>)
 80044b8:	f7fc ffd1 	bl	800145e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d014      	beq.n	80044ee <HAL_TIM_PWM_Init+0x8a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d010      	beq.n	80044ee <HAL_TIM_PWM_Init+0x8a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d00c      	beq.n	80044ee <HAL_TIM_PWM_Init+0x8a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d008      	beq.n	80044ee <HAL_TIM_PWM_Init+0x8a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b60      	cmp	r3, #96	; 0x60
 80044e2:	d004      	beq.n	80044ee <HAL_TIM_PWM_Init+0x8a>
 80044e4:	f240 5114 	movw	r1, #1300	; 0x514
 80044e8:	4839      	ldr	r0, [pc, #228]	; (80045d0 <HAL_TIM_PWM_Init+0x16c>)
 80044ea:	f7fc ffb8 	bl	800145e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_PWM_Init+0xb0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_PWM_Init+0xb0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004508:	d004      	beq.n	8004514 <HAL_TIM_PWM_Init+0xb0>
 800450a:	f240 5115 	movw	r1, #1301	; 0x515
 800450e:	4830      	ldr	r0, [pc, #192]	; (80045d0 <HAL_TIM_PWM_Init+0x16c>)
 8004510:	f7fc ffa5 	bl	800145e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_TIM_PWM_Init+0xca>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d004      	beq.n	800452e <HAL_TIM_PWM_Init+0xca>
 8004524:	f240 5116 	movw	r1, #1302	; 0x516
 8004528:	4829      	ldr	r0, [pc, #164]	; (80045d0 <HAL_TIM_PWM_Init+0x16c>)
 800452a:	f7fc ff98 	bl	800145e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_PWM_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f846 	bl	80045d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fd50 	bl	8005000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40001000 	.word	0x40001000
 80045cc:	40001400 	.word	0x40001400
 80045d0:	080057c0 	.word	0x080057c0

080045d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d10b      	bne.n	8004614 <HAL_TIM_PWM_Start+0x2c>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d040      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d03d      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d03a      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d037      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5f      	ldr	r2, [pc, #380]	; (8004798 <HAL_TIM_PWM_Start+0x1b0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10b      	bne.n	8004636 <HAL_TIM_PWM_Start+0x4e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02f      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d02c      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d029      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d026      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_TIM_PWM_Start+0x1b4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10b      	bne.n	8004658 <HAL_TIM_PWM_Start+0x70>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01e      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d01b      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d018      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d015      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_TIM_PWM_Start+0x1b8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10b      	bne.n	800467a <HAL_TIM_PWM_Start+0x92>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00a      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d007      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d004      	beq.n	8004684 <HAL_TIM_PWM_Start+0x9c>
 800467a:	f240 5199 	movw	r1, #1433	; 0x599
 800467e:	4849      	ldr	r0, [pc, #292]	; (80047a4 <HAL_TIM_PWM_Start+0x1bc>)
 8004680:	f7fc feed 	bl	800145e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_TIM_PWM_Start+0xb6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	e022      	b.n	80046e4 <HAL_TIM_PWM_Start+0xfc>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d109      	bne.n	80046b8 <HAL_TIM_PWM_Start+0xd0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e015      	b.n	80046e4 <HAL_TIM_PWM_Start+0xfc>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d109      	bne.n	80046d2 <HAL_TIM_PWM_Start+0xea>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	e008      	b.n	80046e4 <HAL_TIM_PWM_Start+0xfc>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	bf14      	ite	ne
 80046de:	2301      	movne	r3, #1
 80046e0:	2300      	moveq	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_PWM_Start+0x104>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e051      	b.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <HAL_TIM_PWM_Start+0x114>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fa:	e013      	b.n	8004724 <HAL_TIM_PWM_Start+0x13c>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d104      	bne.n	800470c <HAL_TIM_PWM_Start+0x124>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800470a:	e00b      	b.n	8004724 <HAL_TIM_PWM_Start+0x13c>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b08      	cmp	r3, #8
 8004710:	d104      	bne.n	800471c <HAL_TIM_PWM_Start+0x134>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800471a:	e003      	b.n	8004724 <HAL_TIM_PWM_Start+0x13c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fe4d 	bl	80053cc <TIM_CCxChannelCmd>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00e      	beq.n	800475a <HAL_TIM_PWM_Start+0x172>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <HAL_TIM_PWM_Start+0x1b0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIM_PWM_Start+0x172>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a14      	ldr	r2, [pc, #80]	; (800479c <HAL_TIM_PWM_Start+0x1b4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIM_PWM_Start+0x172>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <HAL_TIM_PWM_Start+0x1b8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d111      	bne.n	800477e <HAL_TIM_PWM_Start+0x196>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b06      	cmp	r3, #6
 800476a:	d010      	beq.n	800478e <HAL_TIM_PWM_Start+0x1a6>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e007      	b.n	800478e <HAL_TIM_PWM_Start+0x1a6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	080057c0 	.word	0x080057c0

080047a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d010      	beq.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d00d      	beq.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d00a      	beq.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b3c      	cmp	r3, #60	; 0x3c
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80047d2:	f241 0127 	movw	r1, #4135	; 0x1027
 80047d6:	4881      	ldr	r0, [pc, #516]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 80047d8:	f7fc fe41 	bl	800145e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b60      	cmp	r3, #96	; 0x60
 80047e2:	d008      	beq.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d004      	beq.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80047ec:	f241 0128 	movw	r1, #4136	; 0x1028
 80047f0:	487a      	ldr	r0, [pc, #488]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 80047f2:	f7fc fe34 	bl	800145e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_TIM_PWM_ConfigChannel+0x68>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_PWM_ConfigChannel+0x68>
 8004806:	f241 0129 	movw	r1, #4137	; 0x1029
 800480a:	4874      	ldr	r0, [pc, #464]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 800480c:	f7fc fe27 	bl	800145e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_TIM_PWM_ConfigChannel+0x82>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d004      	beq.n	800482a <HAL_TIM_PWM_ConfigChannel+0x82>
 8004820:	f241 012a 	movw	r1, #4138	; 0x102a
 8004824:	486d      	ldr	r0, [pc, #436]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 8004826:	f7fc fe1a 	bl	800145e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x90>
 8004834:	2302      	movs	r3, #2
 8004836:	e119      	b.n	8004a6c <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	f200 810c 	bhi.w	8004a60 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004885 	.word	0x08004885
 8004854:	08004a61 	.word	0x08004a61
 8004858:	08004a61 	.word	0x08004a61
 800485c:	08004a61 	.word	0x08004a61
 8004860:	080048f7 	.word	0x080048f7
 8004864:	08004a61 	.word	0x08004a61
 8004868:	08004a61 	.word	0x08004a61
 800486c:	08004a61 	.word	0x08004a61
 8004870:	0800496b 	.word	0x0800496b
 8004874:	08004a61 	.word	0x08004a61
 8004878:	08004a61 	.word	0x08004a61
 800487c:	08004a61 	.word	0x08004a61
 8004880:	080049ed 	.word	0x080049ed
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d013      	beq.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a53      	ldr	r2, [pc, #332]	; (80049e0 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a51      	ldr	r2, [pc, #324]	; (80049e4 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a50      	ldr	r2, [pc, #320]	; (80049e8 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 80048ac:	f241 0134 	movw	r1, #4148	; 0x1034
 80048b0:	484a      	ldr	r0, [pc, #296]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 80048b2:	f7fc fdd4 	bl	800145e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fbf9 	bl	80050b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0208 	orr.w	r2, r2, #8
 80048d0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0204 	bic.w	r2, r2, #4
 80048e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6999      	ldr	r1, [r3, #24]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	619a      	str	r2, [r3, #24]
      break;
 80048f4:	e0b5      	b.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d013      	beq.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x180>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a36      	ldr	r2, [pc, #216]	; (80049e0 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x180>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a35      	ldr	r2, [pc, #212]	; (80049e4 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x180>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a33      	ldr	r2, [pc, #204]	; (80049e8 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x180>
 800491e:	f241 0145 	movw	r1, #4165	; 0x1045
 8004922:	482e      	ldr	r0, [pc, #184]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 8004924:	f7fc fd9b 	bl	800145e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fbfc 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
      break;
 8004968:	e07b      	b.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d013      	beq.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a19      	ldr	r2, [pc, #100]	; (80049e0 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1f4>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8004992:	f241 0156 	movw	r1, #4182	; 0x1056
 8004996:	4811      	ldr	r0, [pc, #68]	; (80049dc <HAL_TIM_PWM_ConfigChannel+0x234>)
 8004998:	f7fc fd61 	bl	800145e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fc00 	bl	80051a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0208 	orr.w	r2, r2, #8
 80049b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0204 	bic.w	r2, r2, #4
 80049c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69d9      	ldr	r1, [r3, #28]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	61da      	str	r2, [r3, #28]
      break;
 80049da:	e042      	b.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 80049dc:	080057c0 	.word	0x080057c0
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d013      	beq.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x276>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00e      	beq.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x276>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d009      	beq.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x276>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x276>
 8004a14:	f241 0167 	movw	r1, #4199	; 0x1067
 8004a18:	4819      	ldr	r0, [pc, #100]	; (8004a80 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8004a1a:	f7fc fd20 	bl	800145e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fbfc 	bl	8005222 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69d9      	ldr	r1, [r3, #28]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	021a      	lsls	r2, r3, #8
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	61da      	str	r2, [r3, #28]
      break;
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    default:
      break;
 8004a60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	080057c0 	.word	0x080057c0

08004a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_ConfigClockSource+0x18>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e2a5      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x564>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab4:	d029      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	d024      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d01c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d014      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d010      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b50      	cmp	r3, #80	; 0x50
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d008      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b70      	cmp	r3, #112	; 0x70
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x86>
 8004b00:	f241 4132 	movw	r1, #5170	; 0x1432
 8004b04:	4871      	ldr	r0, [pc, #452]	; (8004ccc <HAL_TIM_ConfigClockSource+0x248>)
 8004b06:	f7fc fcaa 	bl	800145e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b20:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	f000 80d7 	beq.w	8004ce4 <HAL_TIM_ConfigClockSource+0x260>
 8004b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3a:	f200 8249 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d02d      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0x11c>
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	f200 8242 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b4c:	2b70      	cmp	r3, #112	; 0x70
 8004b4e:	d051      	beq.n	8004bf4 <HAL_TIM_ConfigClockSource+0x170>
 8004b50:	2b70      	cmp	r3, #112	; 0x70
 8004b52:	f200 823d 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b56:	2b60      	cmp	r3, #96	; 0x60
 8004b58:	f000 8177 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x3c6>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	f200 8237 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b62:	2b50      	cmp	r3, #80	; 0x50
 8004b64:	f000 8125 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x32e>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	f200 8231 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	f000 81c0 	beq.w	8004ef4 <HAL_TIM_ConfigClockSource+0x470>
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	f200 822b 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	f000 8206 	beq.w	8004f8c <HAL_TIM_ConfigClockSource+0x508>
 8004b80:	2b30      	cmp	r3, #48	; 0x30
 8004b82:	f200 8225 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	f000 8200 	beq.w	8004f8c <HAL_TIM_ConfigClockSource+0x508>
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	f200 821f 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 81fa 	beq.w	8004f8c <HAL_TIM_ConfigClockSource+0x508>
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	f000 81f7 	beq.w	8004f8c <HAL_TIM_ConfigClockSource+0x508>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b9e:	e217      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x54c>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	f000 8214 	beq.w	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a47      	ldr	r2, [pc, #284]	; (8004cd0 <HAL_TIM_ConfigClockSource+0x24c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	f000 820e 	beq.w	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a45      	ldr	r2, [pc, #276]	; (8004cd4 <HAL_TIM_ConfigClockSource+0x250>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	f000 8208 	beq.w	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a43      	ldr	r2, [pc, #268]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x254>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	f000 8202 	beq.w	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a41      	ldr	r2, [pc, #260]	; (8004cdc <HAL_TIM_ConfigClockSource+0x258>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	f000 81fc 	beq.w	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3f      	ldr	r2, [pc, #252]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x25c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f000 81f6 	beq.w	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
 8004be8:	f241 413e 	movw	r1, #5182	; 0x143e
 8004bec:	4837      	ldr	r0, [pc, #220]	; (8004ccc <HAL_TIM_ConfigClockSource+0x248>)
 8004bee:	f7fc fc36 	bl	800145e <assert_failed>
      break;
 8004bf2:	e1ef      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x550>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x1a2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a33      	ldr	r2, [pc, #204]	; (8004cd0 <HAL_TIM_ConfigClockSource+0x24c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x1a2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a31      	ldr	r2, [pc, #196]	; (8004cd4 <HAL_TIM_ConfigClockSource+0x250>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x1a2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a30      	ldr	r2, [pc, #192]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x254>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x1a2>
 8004c1c:	f241 4145 	movw	r1, #5189	; 0x1445
 8004c20:	482a      	ldr	r0, [pc, #168]	; (8004ccc <HAL_TIM_ConfigClockSource+0x248>)
 8004c22:	f7fc fc1c 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x1d2>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x1d2>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c40:	d009      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x1d2>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x1d2>
 8004c4c:	f241 4148 	movw	r1, #5192	; 0x1448
 8004c50:	481e      	ldr	r0, [pc, #120]	; (8004ccc <HAL_TIM_ConfigClockSource+0x248>)
 8004c52:	f7fc fc04 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5e:	d014      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x206>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x206>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x206>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d008      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x206>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b0a      	cmp	r3, #10
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x206>
 8004c80:	f241 4149 	movw	r1, #5193	; 0x1449
 8004c84:	4811      	ldr	r0, [pc, #68]	; (8004ccc <HAL_TIM_ConfigClockSource+0x248>)
 8004c86:	f7fc fbea 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d904      	bls.n	8004c9c <HAL_TIM_ConfigClockSource+0x218>
 8004c92:	f241 414a 	movw	r1, #5194	; 0x144a
 8004c96:	480d      	ldr	r0, [pc, #52]	; (8004ccc <HAL_TIM_ConfigClockSource+0x248>)
 8004c98:	f7fc fbe1 	bl	800145e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6899      	ldr	r1, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f000 fb6e 	bl	800538c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]
      break;
 8004cc8:	e185      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
 8004cca:	bf00      	nop
 8004ccc:	080057c0 	.word	0x080057c0
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40001000 	.word	0x40001000
 8004ce0:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d013      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x292>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7c      	ldr	r2, [pc, #496]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x460>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x292>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7a      	ldr	r2, [pc, #488]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x464>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x292>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a79      	ldr	r2, [pc, #484]	; (8004eec <HAL_TIM_ConfigClockSource+0x468>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x292>
 8004d0c:	f241 415d 	movw	r1, #5213	; 0x145d
 8004d10:	4877      	ldr	r0, [pc, #476]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004d12:	f7fc fba4 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d013      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x2c2>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	d00e      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x2c2>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d30:	d009      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x2c2>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d3a:	d004      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x2c2>
 8004d3c:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8004d40:	486b      	ldr	r0, [pc, #428]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004d42:	f7fc fb8c 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d014      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x2f6>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x2f6>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x2f6>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d008      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x2f6>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x2f6>
 8004d70:	f241 4161 	movw	r1, #5217	; 0x1461
 8004d74:	485e      	ldr	r0, [pc, #376]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004d76:	f7fc fb72 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b0f      	cmp	r3, #15
 8004d80:	d904      	bls.n	8004d8c <HAL_TIM_ConfigClockSource+0x308>
 8004d82:	f241 4162 	movw	r1, #5218	; 0x1462
 8004d86:	485a      	ldr	r0, [pc, #360]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004d88:	f7fc fb69 	bl	800145e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f000 faf6 	bl	800538c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dae:	609a      	str	r2, [r3, #8]
      break;
 8004db0:	e111      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d013      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0x360>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a48      	ldr	r2, [pc, #288]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x460>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0x360>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a47      	ldr	r2, [pc, #284]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x464>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0x360>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a45      	ldr	r2, [pc, #276]	; (8004eec <HAL_TIM_ConfigClockSource+0x468>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0x360>
 8004dda:	f241 4171 	movw	r1, #5233	; 0x1471
 8004dde:	4844      	ldr	r0, [pc, #272]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004de0:	f7fc fb3d 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dec:	d014      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0x394>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d010      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0x394>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0x394>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d008      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0x394>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b0a      	cmp	r3, #10
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0x394>
 8004e0e:	f241 4174 	movw	r1, #5236	; 0x1474
 8004e12:	4837      	ldr	r0, [pc, #220]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004e14:	f7fc fb23 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b0f      	cmp	r3, #15
 8004e1e:	d904      	bls.n	8004e2a <HAL_TIM_ConfigClockSource+0x3a6>
 8004e20:	f241 4175 	movw	r1, #5237	; 0x1475
 8004e24:	4832      	ldr	r0, [pc, #200]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004e26:	f7fc fb1a 	bl	800145e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 fa31 	bl	800529e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2150      	movs	r1, #80	; 0x50
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fa88 	bl	8005358 <TIM_ITRx_SetConfig>
      break;
 8004e48:	e0c5      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0x3f8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <HAL_TIM_ConfigClockSource+0x460>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0x3f8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <HAL_TIM_ConfigClockSource+0x464>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0x3f8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <HAL_TIM_ConfigClockSource+0x468>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0x3f8>
 8004e72:	f241 4181 	movw	r1, #5249	; 0x1481
 8004e76:	481e      	ldr	r0, [pc, #120]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004e78:	f7fc faf1 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e84:	d014      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x42c>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x42c>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x42c>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d008      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x42c>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b0a      	cmp	r3, #10
 8004ea4:	d004      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x42c>
 8004ea6:	f241 4184 	movw	r1, #5252	; 0x1484
 8004eaa:	4811      	ldr	r0, [pc, #68]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004eac:	f7fc fad7 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d904      	bls.n	8004ec2 <HAL_TIM_ConfigClockSource+0x43e>
 8004eb8:	f241 4185 	movw	r1, #5253	; 0x1485
 8004ebc:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <HAL_TIM_ConfigClockSource+0x46c>)
 8004ebe:	f7fc face 	bl	800145e <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fa13 	bl	80052fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2160      	movs	r1, #96	; 0x60
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa3c 	bl	8005358 <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e079      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
 8004ee2:	bf00      	nop
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	080057c0 	.word	0x080057c0
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d013      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x4a2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <HAL_TIM_ConfigClockSource+0x56c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00e      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x4a2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a39      	ldr	r2, [pc, #228]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x570>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x4a2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a38      	ldr	r2, [pc, #224]	; (8004ff8 <HAL_TIM_ConfigClockSource+0x574>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x4a2>
 8004f1c:	f241 4191 	movw	r1, #5265	; 0x1491
 8004f20:	4836      	ldr	r0, [pc, #216]	; (8004ffc <HAL_TIM_ConfigClockSource+0x578>)
 8004f22:	f7fc fa9c 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2e:	d014      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x4d6>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x4d6>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x4d6>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d008      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x4d6>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b0a      	cmp	r3, #10
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x4d6>
 8004f50:	f241 4194 	movw	r1, #5268	; 0x1494
 8004f54:	4829      	ldr	r0, [pc, #164]	; (8004ffc <HAL_TIM_ConfigClockSource+0x578>)
 8004f56:	f7fc fa82 	bl	800145e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b0f      	cmp	r3, #15
 8004f60:	d904      	bls.n	8004f6c <HAL_TIM_ConfigClockSource+0x4e8>
 8004f62:	f241 4195 	movw	r1, #5269	; 0x1495
 8004f66:	4825      	ldr	r0, [pc, #148]	; (8004ffc <HAL_TIM_ConfigClockSource+0x578>)
 8004f68:	f7fc fa79 	bl	800145e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f000 f990 	bl	800529e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f9e7 	bl	8005358 <TIM_ITRx_SetConfig>
      break;
 8004f8a:	e024      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d013      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x53a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_TIM_ConfigClockSource+0x56c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x53a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x570>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x53a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_TIM_ConfigClockSource+0x574>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x53a>
 8004fb4:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8004fb8:	4810      	ldr	r0, [pc, #64]	; (8004ffc <HAL_TIM_ConfigClockSource+0x578>)
 8004fba:	f7fc fa50 	bl	800145e <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 f9c5 	bl	8005358 <TIM_ITRx_SetConfig>
        break;
 8004fce:	e002      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
      break;
 8004fd0:	bf00      	nop
 8004fd2:	e000      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x552>
      break;
 8004fd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	080057c0 	.word	0x080057c0

08005000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005016:	d00b      	beq.n	8005030 <TIM_Base_SetConfig+0x30>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <TIM_Base_SetConfig+0xa8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_Base_SetConfig+0x30>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <TIM_Base_SetConfig+0xac>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_Base_SetConfig+0x30>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <TIM_Base_SetConfig+0xb0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_Base_SetConfig+0xa8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0x62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_Base_SetConfig+0xac>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0x62>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <TIM_Base_SetConfig+0xb0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	615a      	str	r2, [r3, #20]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00

080050b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	617b      	str	r3, [r7, #20]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	617b      	str	r3, [r7, #20]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	617b      	str	r3, [r7, #20]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 0302 	bic.w	r3, r3, #2
 80050fc:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0210 	bic.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005250:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005258:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800526c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	031b      	lsls	r3, r3, #12
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	f023 0201 	bic.w	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 030a 	bic.w	r3, r3, #10
 80052da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b087      	sub	sp, #28
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	f043 0307 	orr.w	r3, r3, #7
 800537a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	609a      	str	r2, [r3, #8]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
	...

080053cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d010      	beq.n	8005402 <TIM_CCxChannelCmd+0x36>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a20      	ldr	r2, [pc, #128]	; (8005464 <TIM_CCxChannelCmd+0x98>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00c      	beq.n	8005402 <TIM_CCxChannelCmd+0x36>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <TIM_CCxChannelCmd+0x9c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d008      	beq.n	8005402 <TIM_CCxChannelCmd+0x36>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <TIM_CCxChannelCmd+0xa0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <TIM_CCxChannelCmd+0x36>
 80053f8:	f641 5109 	movw	r1, #7433	; 0x1d09
 80053fc:	481c      	ldr	r0, [pc, #112]	; (8005470 <TIM_CCxChannelCmd+0xa4>)
 80053fe:	f7fc f82e 	bl	800145e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <TIM_CCxChannelCmd+0x5e>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d00d      	beq.n	800542a <TIM_CCxChannelCmd+0x5e>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d00a      	beq.n	800542a <TIM_CCxChannelCmd+0x5e>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d007      	beq.n	800542a <TIM_CCxChannelCmd+0x5e>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b3c      	cmp	r3, #60	; 0x3c
 800541e:	d004      	beq.n	800542a <TIM_CCxChannelCmd+0x5e>
 8005420:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8005424:	4812      	ldr	r0, [pc, #72]	; (8005470 <TIM_CCxChannelCmd+0xa4>)
 8005426:	f7fc f81a 	bl	800145e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2201      	movs	r2, #1
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	43db      	mvns	r3, r3
 8005440:	401a      	ands	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	fa01 f303 	lsl.w	r3, r1, r3
 8005456:	431a      	orrs	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	080057c0 	.word	0x080057c0

08005474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005486:	d01d      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a4f      	ldr	r2, [pc, #316]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d018      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a4e      	ldr	r2, [pc, #312]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a4c      	ldr	r2, [pc, #304]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4b      	ldr	r2, [pc, #300]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a49      	ldr	r2, [pc, #292]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80054ba:	f240 7186 	movw	r1, #1926	; 0x786
 80054be:	4848      	ldr	r0, [pc, #288]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80054c0:	f7fb ffcd 	bl	800145e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d01c      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d018      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d014      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d010      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b50      	cmp	r3, #80	; 0x50
 80054f2:	d00c      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d008      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d004      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005504:	f240 7187 	movw	r1, #1927	; 0x787
 8005508:	4835      	ldr	r0, [pc, #212]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800550a:	f7fb ffa8 	bl	800145e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b80      	cmp	r3, #128	; 0x80
 8005514:	d008      	beq.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800551e:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8005522:	482f      	ldr	r0, [pc, #188]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8005524:	f7fb ff9b 	bl	800145e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005532:	2302      	movs	r3, #2
 8005534:	e046      	b.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x150>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d00e      	beq.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a11      	ldr	r2, [pc, #68]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d10c      	bne.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x13e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40001000 	.word	0x40001000
 80055dc:	40001400 	.word	0x40001400
 80055e0:	080057f8 	.word	0x080057f8

080055e4 <__libc_init_array>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	2600      	movs	r6, #0
 80055e8:	4d0c      	ldr	r5, [pc, #48]	; (800561c <__libc_init_array+0x38>)
 80055ea:	4c0d      	ldr	r4, [pc, #52]	; (8005620 <__libc_init_array+0x3c>)
 80055ec:	1b64      	subs	r4, r4, r5
 80055ee:	10a4      	asrs	r4, r4, #2
 80055f0:	42a6      	cmp	r6, r4
 80055f2:	d109      	bne.n	8005608 <__libc_init_array+0x24>
 80055f4:	f000 f822 	bl	800563c <_init>
 80055f8:	2600      	movs	r6, #0
 80055fa:	4d0a      	ldr	r5, [pc, #40]	; (8005624 <__libc_init_array+0x40>)
 80055fc:	4c0a      	ldr	r4, [pc, #40]	; (8005628 <__libc_init_array+0x44>)
 80055fe:	1b64      	subs	r4, r4, r5
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	42a6      	cmp	r6, r4
 8005604:	d105      	bne.n	8005612 <__libc_init_array+0x2e>
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	f855 3b04 	ldr.w	r3, [r5], #4
 800560c:	4798      	blx	r3
 800560e:	3601      	adds	r6, #1
 8005610:	e7ee      	b.n	80055f0 <__libc_init_array+0xc>
 8005612:	f855 3b04 	ldr.w	r3, [r5], #4
 8005616:	4798      	blx	r3
 8005618:	3601      	adds	r6, #1
 800561a:	e7f2      	b.n	8005602 <__libc_init_array+0x1e>
 800561c:	08005844 	.word	0x08005844
 8005620:	08005844 	.word	0x08005844
 8005624:	08005844 	.word	0x08005844
 8005628:	08005848 	.word	0x08005848

0800562c <memset>:
 800562c:	4603      	mov	r3, r0
 800562e:	4402      	add	r2, r0
 8005630:	4293      	cmp	r3, r2
 8005632:	d100      	bne.n	8005636 <memset+0xa>
 8005634:	4770      	bx	lr
 8005636:	f803 1b01 	strb.w	r1, [r3], #1
 800563a:	e7f9      	b.n	8005630 <memset+0x4>

0800563c <_init>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr

08005648 <_fini>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr
